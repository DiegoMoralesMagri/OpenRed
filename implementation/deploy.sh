#!/bin/bash

# Script de d√©ploiement automatis√© pour l'√©cosyst√®me O-Red
# Version: 1.0.0
# Auteur: O-Red Community

set -e  # Arr√™t en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
ORED_VERSION="1.0.0"
DEPLOYMENT_ENV=${1:-development}
PROJECT_ROOT=$(pwd)

echo -e "${BLUE}üöÄ D√©ploiement de l'√©cosyst√®me O-Red v${ORED_VERSION}${NC}"
echo -e "${BLUE}üìÅ R√©pertoire: ${PROJECT_ROOT}${NC}"
echo -e "${BLUE}üåç Environnement: ${DEPLOYMENT_ENV}${NC}"
echo ""

# Fonction pour afficher les √©tapes
step_counter=1
print_step() {
    echo -e "${GREEN}[${step_counter}/10] $1${NC}"
    ((step_counter++))
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    print_step "V√©rification des pr√©requis"
    
    # Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
        exit 1
    fi
    echo -e "‚úÖ Docker: $(docker --version)"
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
        exit 1
    fi
    echo -e "‚úÖ Docker Compose: $(docker-compose --version)"
    
    # Node.js (pour l'interface web)
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js n'est pas install√©${NC}"
        exit 1
    fi
    echo -e "‚úÖ Node.js: $(node --version)"
    
    # Python (pour l'API et les n≈ìuds)
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python 3 n'est pas install√©${NC}"
        exit 1
    fi
    echo -e "‚úÖ Python: $(python3 --version)"
    
    echo ""
}

# Configuration de l'environnement
setup_environment() {
    print_step "Configuration de l'environnement"
    
    # Cr√©ation du fichier .env si n√©cessaire
    if [ ! -f "${PROJECT_ROOT}/central-api/.env" ]; then
        echo -e "${YELLOW}üìù Cr√©ation du fichier .env pour l'API centrale${NC}"
        cat > "${PROJECT_ROOT}/central-api/.env" << EOF
# Configuration O-Red API Centrale - ${DEPLOYMENT_ENV}
DEBUG=${DEBUG:-false}
SECRET_KEY=$(openssl rand -hex 32)
DATABASE_URL=postgresql+asyncpg://ored:ored_secure_password@postgres:5432/ored_central
REDIS_URL=redis://redis:6379/0
LOG_LEVEL=INFO
PROMETHEUS_ENABLED=true

# Configuration P2P
P2P_PORT=8001
P2P_MAX_CONNECTIONS=100

# Configuration IA
AI_DISTRIBUTED_COMPUTING_ENABLED=true
AI_PRIVACY_LEVEL=maximum

# Configuration s√©curit√©
POST_QUANTUM_ENABLED=true
RATE_LIMIT_ENABLED=true
EOF
    fi
    
    # Cr√©ation des dossiers n√©cessaires
    mkdir -p "${PROJECT_ROOT}/logs"
    mkdir -p "${PROJECT_ROOT}/storage"
    mkdir -p "${PROJECT_ROOT}/data/postgres"
    mkdir -p "${PROJECT_ROOT}/data/redis"
    
    echo -e "‚úÖ Environnement configur√©"
    echo ""
}

# Construction des images Docker
build_images() {
    print_step "Construction des images Docker"
    
    cd "${PROJECT_ROOT}/central-api"
    echo -e "${BLUE}üî® Construction de l'image API centrale...${NC}"
    docker build -t ored/central-api:${ORED_VERSION} .
    docker tag ored/central-api:${ORED_VERSION} ored/central-api:latest
    
    if [ -d "${PROJECT_ROOT}/web-interface" ]; then
        cd "${PROJECT_ROOT}/web-interface"
        echo -e "${BLUE}üî® Construction de l'image interface web...${NC}"
        # V√©rifier si le Dockerfile existe
        if [ -f "Dockerfile" ]; then
            docker build -t ored/web-interface:${ORED_VERSION} .
            docker tag ored/web-interface:${ORED_VERSION} ored/web-interface:latest
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Dockerfile de l'interface web non trouv√©, construction ignor√©e${NC}"
        fi
    fi
    
    if [ -d "${PROJECT_ROOT}/node-client" ]; then
        cd "${PROJECT_ROOT}/node-client"
        echo -e "${BLUE}üî® Construction de l'image client n≈ìud...${NC}"
        # V√©rifier si le Dockerfile existe
        if [ -f "Dockerfile" ]; then
            docker build -t ored/node-client:${ORED_VERSION} .
            docker tag ored/node-client:${ORED_VERSION} ored/node-client:latest
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Dockerfile du client n≈ìud non trouv√©, construction ignor√©e${NC}"
        fi
    fi
    
    echo -e "‚úÖ Images Docker construites"
    echo ""
}

# Installation des d√©pendances
install_dependencies() {
    print_step "Installation des d√©pendances"
    
    # API centrale
    if [ -f "${PROJECT_ROOT}/central-api/requirements.txt" ]; then
        echo -e "${BLUE}üì¶ Installation des d√©pendances Python (API centrale)...${NC}"
        cd "${PROJECT_ROOT}/central-api"
        python3 -m pip install -r requirements.txt
    fi
    
    # Interface web
    if [ -f "${PROJECT_ROOT}/web-interface/package.json" ]; then
        echo -e "${BLUE}üì¶ Installation des d√©pendances Node.js (Interface web)...${NC}"
        cd "${PROJECT_ROOT}/web-interface"
        npm install
    fi
    
    # Client n≈ìud
    if [ -f "${PROJECT_ROOT}/node-client/requirements.txt" ]; then
        echo -e "${BLUE}üì¶ Installation des d√©pendances Python (Client n≈ìud)...${NC}"
        cd "${PROJECT_ROOT}/node-client"
        python3 -m pip install -r requirements.txt
    fi
    
    echo -e "‚úÖ D√©pendances install√©es"
    echo ""
}

# Configuration de la base de donn√©es
setup_database() {
    print_step "Configuration de la base de donn√©es"
    
    # Cr√©ation du script d'initialisation de la base de donn√©es
    mkdir -p "${PROJECT_ROOT}/central-api/db"
    cat > "${PROJECT_ROOT}/central-api/db/init.sql" << EOF
-- Script d'initialisation de la base de donn√©es O-Red
-- Version: ${ORED_VERSION}

-- Cr√©ation de la base de donn√©es (si n√©cessaire)
-- CREATE DATABASE ored_central;

-- Extensions n√©cessaires
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_crypto";

-- Index pour am√©liorer les performances
-- Ces index seront cr√©√©s automatiquement par SQLAlchemy lors du premier d√©marrage

-- Configuration des permissions
-- GRANT ALL PRIVILEGES ON DATABASE ored_central TO ored;

-- Insertion de donn√©es de test (seulement en d√©veloppement)
DO \$\$
BEGIN
    IF '${DEPLOYMENT_ENV}' = 'development' THEN
        -- Des donn√©es de test peuvent √™tre ajout√©es ici
        RAISE NOTICE 'Base de donn√©es configur√©e pour le d√©veloppement';
    END IF;
END \$\$;
EOF
    
    echo -e "‚úÖ Configuration de la base de donn√©es cr√©√©e"
    echo ""
}

# Configuration du monitoring
setup_monitoring() {
    print_step "Configuration du monitoring"
    
    mkdir -p "${PROJECT_ROOT}/central-api/monitoring"
    
    # Configuration Prometheus
    cat > "${PROJECT_ROOT}/central-api/monitoring/prometheus.yml" << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'ored-api'
    static_configs:
      - targets: ['ored-api:8000']
    metrics_path: '/metrics'

  - job_name: 'ored-node'
    static_configs:
      - targets: ['ored-node:8001']
    metrics_path: '/metrics'
EOF
    
    # Configuration Nginx
    mkdir -p "${PROJECT_ROOT}/central-api/nginx"
    cat > "${PROJECT_ROOT}/central-api/nginx/nginx.conf" << EOF
events {
    worker_connections 1024;
}

http {
    upstream ored_api {
        server ored-api:8000;
    }
    
    upstream ored_web {
        server ored-web:3000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # API routes
        location /api/ {
            proxy_pass http://ored_api;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # Interface web
        location / {
            proxy_pass http://ored_web;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
EOF
    
    echo -e "‚úÖ Configuration du monitoring cr√©√©e"
    echo ""
}

# D√©marrage des services
start_services() {
    print_step "D√©marrage des services O-Red"
    
    cd "${PROJECT_ROOT}/central-api"
    
    # Arr√™t des services existants
    echo -e "${BLUE}üõë Arr√™t des services existants...${NC}"
    docker-compose down || true
    
    # D√©marrage des services
    echo -e "${BLUE}üöÄ D√©marrage des nouveaux services...${NC}"
    docker-compose up -d
    
    # Attendre que les services soient pr√™ts
    echo -e "${BLUE}‚è≥ Attente de la disponibilit√© des services...${NC}"
    sleep 10
    
    echo -e "‚úÖ Services d√©marr√©s"
    echo ""
}

# V√©rification du d√©ploiement
verify_deployment() {
    print_step "V√©rification du d√©ploiement"
    
    # V√©rification de l'API
    echo -e "${BLUE}üîç V√©rification de l'API centrale...${NC}"
    for i in {1..30}; do
        if curl -f -s "http://localhost:8000/health" > /dev/null; then
            echo -e "‚úÖ API centrale accessible"
            break
        fi
        echo -e "‚è≥ Tentative ${i}/30..."
        sleep 2
    done
    
    # V√©rification de la base de donn√©es
    echo -e "${BLUE}üîç V√©rification de la base de donn√©es...${NC}"
    if docker-compose exec -T postgres pg_isready -U ored; then
        echo -e "‚úÖ Base de donn√©es accessible"
    else
        echo -e "${RED}‚ùå Base de donn√©es non accessible${NC}"
    fi
    
    # V√©rification de Redis
    echo -e "${BLUE}üîç V√©rification de Redis...${NC}"
    if docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
        echo -e "‚úÖ Redis accessible"
    else
        echo -e "${RED}‚ùå Redis non accessible${NC}"
    fi
    
    echo ""
}

# Tests automatis√©s
run_tests() {
    print_step "Ex√©cution des tests"
    
    # Tests de l'API
    if [ -f "${PROJECT_ROOT}/central-api/app/tests/test_main.py" ]; then
        echo -e "${BLUE}üß™ Tests de l'API centrale...${NC}"
        cd "${PROJECT_ROOT}/central-api"
        python3 -m pytest app/tests/ -v || echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√©${NC}"
    fi
    
    # Tests de l'interface web
    if [ -f "${PROJECT_ROOT}/web-interface/package.json" ]; then
        echo -e "${BLUE}üß™ Tests de l'interface web...${NC}"
        cd "${PROJECT_ROOT}/web-interface"
        npm test || echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√©${NC}"
    fi
    
    echo -e "‚úÖ Tests ex√©cut√©s"
    echo ""
}

# Affichage des informations finales
show_final_info() {
    print_step "Informations de d√©ploiement"
    
    echo -e "${GREEN}üéâ D√©ploiement d'O-Red termin√© avec succ√®s !${NC}"
    echo ""
    echo -e "${BLUE}üìã Informations d'acc√®s:${NC}"
    echo -e "   üåê Interface web: http://localhost:3000"
    echo -e "   üîå API centrale: http://localhost:8000"
    echo -e "   üìä API docs: http://localhost:8000/docs"
    echo -e "   üìà Prometheus: http://localhost:9090"
    echo -e "   üìä Grafana: http://localhost:3001 (admin/ored_admin_password)"
    echo ""
    echo -e "${BLUE}üìÅ Logs et donn√©es:${NC}"
    echo -e "   üìù Logs: ${PROJECT_ROOT}/logs/"
    echo -e "   üíæ Stockage: ${PROJECT_ROOT}/storage/"
    echo ""
    echo -e "${BLUE}üîß Commandes utiles:${NC}"
    echo -e "   docker-compose logs -f      # Voir les logs en temps r√©el"
    echo -e "   docker-compose ps           # Statut des services"
    echo -e "   docker-compose down         # Arr√™ter les services"
    echo -e "   docker-compose up -d        # Red√©marrer les services"
    echo ""
    echo -e "${GREEN}Bienvenue dans l'√©cosyst√®me O-Red d√©centralis√© ! üöÄ${NC}"
}

# Ex√©cution du script principal
main() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                  D√âPLOIEMENT O-RED v${ORED_VERSION}                    ‚ïë${NC}"
    echo -e "${BLUE}‚ïë                √âcosyst√®me D√©centralis√©                    ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    check_prerequisites
    setup_environment
    install_dependencies
    setup_database
    setup_monitoring
    build_images
    start_services
    verify_deployment
    
    if [ "${DEPLOYMENT_ENV}" != "production" ]; then
        run_tests
    fi
    
    show_final_info
}

# Gestion des erreurs
trap 'echo -e "${RED}‚ùå Erreur lors du d√©ploiement${NC}"; exit 1' ERR

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi