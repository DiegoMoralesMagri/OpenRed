#!/usr/bin/env python3
"""
üè∞ OpenRed Network - Syst√®me Complet Int√©gr√©
Forts + Fen√™tres + Cartographie R√©seau + Communication WAN
"""

import socket
import json
import time
import threading
import uuid
import hashlib
import requests
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
import math


@dataclass
class IdentiteComplete:
    """Identit√© compl√®te d'un fort avec toutes les capacit√©s"""
    id_fort: str
    nom: str
    adresse_orp: str
    cle_publique: str
    position_x: float
    position_y: float
    ip_publique: str
    port_reseau: int
    timestamp_creation: str
    version_protocole: str = "2.0.0"


class FenetreEvoluee:
    """
    ü™ü Fen√™tre √©volu√©e avec capacit√©s r√©seau et cartographie
    """
    
    def __init__(self, proprietaire: IdentiteComplete, type_fenetre: str):
        self.proprietaire = proprietaire
        self.type_fenetre = type_fenetre
        self.contenu = {}
        self.observateurs_autorises = []
        self.sessions_actives = {}
        self.stats_consultation = {"vues": 0, "observateurs_uniques": set()}
    
    def configurer_contenu(self, contenu: Dict):
        """Configure le contenu de la fen√™tre"""
        self.contenu = {
            "timestamp": datetime.now().isoformat(),
            "proprietaire": self.proprietaire.id_fort,
            "type": self.type_fenetre,
            "donnees": contenu,
            "position_fort": {"x": self.proprietaire.position_x, "y": self.proprietaire.position_y},
            "watermark": f"WINDOW-{uuid.uuid4()}"
        }
    
    def autoriser_observation_distante(self, id_fort_observateur: str, addr_reseau: Tuple) -> Optional[Dict]:
        """Autorise observation via r√©seau avec projection s√©curis√©e"""
        
        # V√©rification autorisation
        if self.type_fenetre == "publique" or id_fort_observateur in self.observateurs_autorizes:
            session_id = str(uuid.uuid4())
            
            # Projection s√©curis√©e avec anti-copie
            projection = {
                "session_id": session_id,
                "type_projection": f"projection_reseau_{self.type_fenetre}",
                "fort_proprietaire": self.proprietaire.id_fort,
                "fort_observateur": id_fort_observateur,
                "timestamp": datetime.now().isoformat(),
                "contenu_projete": self.contenu.copy(),
                "protection_anti_copie": {
                    "watermark_unique": f"NET-{id_fort_observateur}-{uuid.uuid4()}",
                    "session_temporaire": True,
                    "addr_autorisee": addr_reseau,
                    "expiration": time.time() + 300  # 5 minutes
                },
                "metadonnees_reseau": {
                    "route_utilisee": "directe",  # Sera mis √† jour si route via relais
                    "latence_reseau": 0,
                    "qualite_signal": "excellente"
                }
            }
            
            # Enregistrement session
            self.sessions_actives[session_id] = {
                "observateur": id_fort_observateur,
                "addr": addr_reseau,
                "debut": time.time(),
                "projections_envoyees": 1
            }
            
            # Stats
            self.stats_consultation["vues"] += 1
            self.stats_consultation["observateurs_uniques"].add(id_fort_observateur)
            
            print(f"ü™ü Fen√™tre {self.type_fenetre} consult√©e par {id_fort_observateur} via r√©seau")
            return projection
        
        print(f"üö´ Observation r√©seau refus√©e pour {id_fort_observateur}")
        return None


class FortCompletIntegre:
    """
    üè∞ Fort Complet Int√©gr√©
    Combine: √âcosyst√®me priv√© + Fen√™tres + Cartographie + R√©seau WAN
    """
    
    def __init__(self, nom: str, domaine: str = "openred.network"):
        # üîí DONN√âES PRIV√âES (jamais sur r√©seau)
        self.donnees_privees = {
            "documents": [],
            "historique": [],
            "secrets": {},
            "configurations": {},
            "journal_prive": []
        }
        
        # üÜî Identit√© compl√®te
        self.identite = self._generer_identite_complete(nom, domaine)
        
        # ü™ü FEN√äTRES √âVOLU√âES
        self.fenetre_publique = FenetreEvoluee(self.identite, "publique")
        self.fenetres_canaux: Dict[str, FenetreEvoluee] = {}
        
        # üåê R√âSEAU ET CARTOGRAPHIE
        self.socket_reseau = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket_reseau.bind(('0.0.0.0', self.identite.port_reseau))
        self.socket_reseau.settimeout(0.5)
        
        # Carte r√©seau locale
        self.carte_reseau = {}  # id_fort -> info_fort
        self.routes_connues = {}  # id_fort -> route_optimale
        self.derniere_exploration = 0
        
        # √âtat et statistiques
        self.actif = True
        self.stats_globales = {
            "messages_envoyes": 0,
            "messages_recus": 0,
            "forts_decouverts": 0,
            "consultations_fenetres": 0,
            "canaux_crees": 0
        }
        
        # Configuration initiale
        self._configurer_profil_public()
        self._ajouter_a_carte_locale()
        
        print(f"üè∞ Fort Complet '{nom}' cr√©√©")
        print(f"   ID: {self.identite.id_fort}")
        print(f"   ORP: {self.identite.adresse_orp}")
        print(f"   Position: ({self.identite.position_x:.0f},{self.identite.position_y:.0f})")
        print(f"   R√©seau: {self.identite.ip_publique}:{self.identite.port_reseau}")
    
    def _generer_identite_complete(self, nom: str, domaine: str) -> IdentiteComplete:
        """G√©n√®re identit√© cryptographique compl√®te"""
        # G√©n√©ration cl√© RSA
        cle_privee = rsa.generate_private_key(public_exponent=65537, key_size=2048)
        cle_publique = cle_privee.public_key()
        
        cle_pub_bytes = cle_publique.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        
        id_fort = hashlib.sha256(cle_pub_bytes).hexdigest()[:12]
        
        # Position g√©ographique logique (bas√©e sur hash)
        hash_obj = hashlib.md5(id_fort.encode())
        hash_int = int(hash_obj.hexdigest(), 16)
        position_x = (hash_int % 1000000) / 1000000 * 1000
        position_y = ((hash_int // 1000000) % 1000000) / 1000000 * 1000
        
        # IP publique
        try:
            ip_publique = requests.get("https://api.ipify.org", timeout=3).text.strip()
        except:
            ip_publique = "127.0.0.1"
        
        # Port r√©seau unique
        port_base = 9000 + (hash(id_fort) % 1000)
        
        return IdentiteComplete(
            id_fort=id_fort,
            nom=nom,
            adresse_orp=f"orp://{nom.lower()}.{domaine}",
            cle_publique=cle_pub_bytes.decode('utf-8'),
            position_x=position_x,
            position_y=position_y,
            ip_publique=ip_publique,
            port_reseau=port_base,
            timestamp_creation=datetime.now().isoformat()
        )
    
    def _configurer_profil_public(self):
        """Configure le profil public initial"""
        profil = {
            "nom": self.identite.nom,
            "description": f"Fort {self.identite.nom} sur OpenRed Network",
            "statut": "En ligne",
            "adresse_orp": self.identite.adresse_orp,
            "position": {"x": self.identite.position_x, "y": self.identite.position_y},
            "derniere_activite": datetime.now().isoformat(),
            "services": ["fenetre_publique", "canaux_prives", "cartographie"],
            "publications": [
                {
                    "id": str(uuid.uuid4()),
                    "contenu": f"üè∞ Fort {self.identite.nom} connect√© au r√©seau OpenRed !",
                    "timestamp": datetime.now().isoformat(),
                    "type": "annonce_connexion"
                }
            ]
        }
        self.fenetre_publique.configurer_contenu(profil)
    
    def _ajouter_a_carte_locale(self):
        """Ajoute ce fort √† sa propre carte"""
        self.carte_reseau[self.identite.id_fort] = {
            "identite": asdict(self.identite),
            "addr_reseau": ('127.0.0.1', self.identite.port_reseau),
            "derniere_activite": time.time(),
            "statut": "local",
            "distance": 0.0
        }
    
    def ajouter_donnee_privee(self, categorie: str, donnee: Any):
        """üîí Ajoute donn√©e priv√©e avec journalisation"""
        if categorie not in self.donnees_privees:
            self.donnees_privees[categorie] = []
        
        entry = {
            "donnee": donnee,
            "timestamp": datetime.now().isoformat(),
            "id": str(uuid.uuid4())
        }
        
        self.donnees_privees[categorie].append(entry)
        
        # Journalisation priv√©e
        self.donnees_privees["journal_prive"].append({
            "action": f"donnee_ajoutee_{categorie}",
            "timestamp": datetime.now().isoformat()
        })
        
        print(f"üîí Donn√©e priv√©e ajout√©e: {categorie}")
    
    def publier_dans_fenetre_publique(self, contenu: str, type_publication: str = "message"):
        """üìù Publication dans fen√™tre publique avec diffusion r√©seau"""
        publication = {
            "id": str(uuid.uuid4()),
            "contenu": contenu,
            "type": type_publication,
            "timestamp": datetime.now().isoformat(),
            "auteur": self.identite.nom,
            "position_auteur": {"x": self.identite.position_x, "y": self.identite.position_y}
        }
        
        # Mise √† jour contenu fen√™tre
        contenu_actuel = self.fenetre_publique.contenu["donnees"]
        contenu_actuel["publications"].append(publication)
        contenu_actuel["derniere_activite"] = datetime.now().isoformat()
        
        self.fenetre_publique.configurer_contenu(contenu_actuel)
        
        # Optionnel: Notifier les forts proches
        self._notifier_nouvelle_publication(publication)
        
        print(f"üìù Publication ajout√©e et diffus√©e sur le r√©seau")
    
    def _notifier_nouvelle_publication(self, publication: Dict):
        """Notifie les forts proches d'une nouvelle publication"""
        notification = {
            "type": "notification_publication",
            "fort_source": self.identite.id_fort,
            "publication": publication,
            "timestamp": time.time()
        }
        
        # Envoyer aux forts proches (distance < 300)
        for id_fort, info_fort in self.carte_reseau.items():
            if id_fort != self.identite.id_fort and info_fort.get("distance", float('inf')) < 300:
                self.envoyer_message_reseau(info_fort["addr_reseau"], notification)
    
    def ecouter_reseau_complet(self):
        """üåê √âcoute r√©seau compl√®te avec tous les types de messages"""
        while self.actif:
            try:
                data, addr = self.socket_reseau.recvfrom(4096)  # Buffer plus grand
                message = json.loads(data.decode('utf-8'))
                self.stats_globales["messages_recus"] += 1
                
                self._traiter_message_complet(message, addr)
                
            except socket.timeout:
                continue
            except Exception as e:
                continue
    
    def _traiter_message_complet(self, message: Dict, addr: Tuple):
        """Traite tous les types de messages r√©seau"""
        type_msg = message.get("type")
        fort_source = message.get("fort_source")
        
        if type_msg == "impulsion_radar":
            self._repondre_impulsion_radar(message, addr)
            
        elif type_msg == "reponse_radar":
            self._traiter_reponse_radar(message, addr)
            
        elif type_msg == "demande_consultation_fenetre":
            self._traiter_demande_consultation(message, addr)
            
        elif type_msg == "projection_fenetre_complete":
            self._recevoir_projection_fenetre(message, addr)
            
        elif type_msg == "demande_canal_prive":
            self._traiter_demande_canal_prive(message, addr)
            
        elif type_msg == "notification_publication":
            self._recevoir_notification_publication(message, addr)
            
        elif type_msg == "ping_complet":
            self._repondre_ping_complet(message, addr)
    
    def _repondre_impulsion_radar(self, impulsion: Dict, addr: Tuple):
        """R√©pond √† une impulsion radar avec info compl√®te"""
        fort_emetteur = impulsion.get("fort_emetteur")
        
        if fort_emetteur != self.identite.id_fort:
            reponse = {
                "type": "reponse_radar",
                "fort_repondeur": self.identite.id_fort,
                "fort_destinataire": fort_emetteur,
                "identite_complete": asdict(self.identite),
                "services_disponibles": ["fenetre_publique", "canaux_prives"],
                "timestamp": time.time()
            }
            
            self.envoyer_message_reseau(addr, reponse)
            print(f"üì° R√©ponse radar compl√®te envoy√©e √† {fort_emetteur}")
    
    def _traiter_reponse_radar(self, reponse: Dict, addr: Tuple):
        """Traite r√©ponse radar et met √† jour carte"""
        fort_repondeur = reponse.get("fort_repondeur")
        identite_complete = reponse.get("identite_complete")
        
        if fort_repondeur != self.identite.id_fort and identite_complete:
            # Calculer distance
            distance = math.sqrt(
                (self.identite.position_x - identite_complete["position_x"])**2 +
                (self.identite.position_y - identite_complete["position_y"])**2
            )
            
            # Mettre √† jour carte
            self.carte_reseau[fort_repondeur] = {
                "identite": identite_complete,
                "addr_reseau": addr,
                "derniere_activite": time.time(),
                "statut": "actif",
                "distance": distance,
                "services": reponse.get("services_disponibles", [])
            }
            
            self.stats_globales["forts_decouverts"] += 1
            print(f"üó∫Ô∏è Fort {identite_complete['nom']} d√©couvert (distance: {distance:.0f})")
    
    def _traiter_demande_consultation(self, demande: Dict, addr: Tuple):
        """Traite demande de consultation de fen√™tre"""
        fort_demandeur = demande.get("fort_source")
        type_fenetre = demande.get("type_fenetre", "publique")
        
        projection = None
        
        if type_fenetre == "publique":
            projection = self.fenetre_publique.autoriser_observation_distante(fort_demandeur, addr)
        elif type_fenetre == "canal" and demande.get("id_canal") in self.fenetres_canaux:
            canal = self.fenetres_canaux[demande.get("id_canal")]
            projection = canal.autoriser_observation_distante(fort_demandeur, addr)
        
        if projection:
            reponse = {
                "type": "projection_fenetre_complete",
                "fort_source": self.identite.id_fort,
                "projection": projection,
                "timestamp": time.time()
            }
            
            self.envoyer_message_reseau(addr, reponse)
            self.stats_globales["consultations_fenetres"] += 1
    
    def _recevoir_projection_fenetre(self, message: Dict, addr: Tuple):
        """Re√ßoit une projection de fen√™tre"""
        projection = message.get("projection")
        fort_source = message.get("fort_source")
        
        if projection:
            print(f"ü™ü Projection re√ßue de {fort_source}")
            print(f"   Type: {projection.get('type_projection')}")
            print(f"   Contenu: {len(projection.get('contenu_projete', {}).get('donnees', {}).get('publications', []))} publications")
    
    def _traiter_demande_canal_prive(self, demande: Dict, addr: Tuple):
        """Traite demande de canal priv√©"""
        fort_demandeur = demande.get("fort_source")
        
        # Auto-acceptation pour la d√©mo
        id_canal = self.creer_canal_prive_reseau(fort_demandeur)
        
        reponse = {
            "type": "canal_prive_accepte",
            "fort_source": self.identite.id_fort,
            "id_canal": id_canal,
            "timestamp": time.time()
        }
        
        self.envoyer_message_reseau(addr, reponse)
        self.stats_globales["canaux_crees"] += 1
    
    def _recevoir_notification_publication(self, notification: Dict, addr: Tuple):
        """Re√ßoit notification d'une nouvelle publication"""
        publication = notification.get("publication")
        fort_source = notification.get("fort_source")
        
        if publication:
            print(f"üì¢ Nouvelle publication de {fort_source}: {publication.get('contenu', '')[:50]}...")
    
    def _repondre_ping_complet(self, ping: Dict, addr: Tuple):
        """R√©pond √† un ping complet"""
        reponse = {
            "type": "pong_complet",
            "fort_source": self.identite.id_fort,
            "ping_id": ping.get("ping_id"),
            "timestamp": time.time(),
            "stats": self.obtenir_stats_resumees()
        }
        
        self.envoyer_message_reseau(addr, reponse)
    
    def creer_canal_prive_reseau(self, id_fort_ami: str) -> str:
        """ü§ù Cr√©e canal priv√© avec capacit√©s r√©seau"""
        id_canal = f"canal_{self.identite.id_fort}_{id_fort_ami}"
        
        fenetre_canal = FenetreEvoluee(self.identite, "canal_prive")
        fenetre_canal.observateurs_autorises = [id_fort_ami]
        
        contenu_canal = {
            "participants": [self.identite.id_fort, id_fort_ami],
            "messages": [],
            "cree_le": datetime.now().isoformat(),
            "statut": "actif",
            "type_canal": "prive_reseau"
        }
        
        fenetre_canal.configurer_contenu(contenu_canal)
        self.fenetres_canaux[id_canal] = fenetre_canal
        
        print(f"ü§ù Canal priv√© r√©seau cr√©√© avec {id_fort_ami}")
        return id_canal
    
    def envoyer_message_reseau(self, addr: Tuple, message: Dict):
        """Envoie message via r√©seau"""
        try:
            data = json.dumps(message).encode('utf-8')
            self.socket_reseau.sendto(data, addr)
            self.stats_globales["messages_envoyes"] += 1
        except Exception as e:
            pass
    
    def explorer_reseau_radar(self):
        """üì° Exploration radar du r√©seau"""
        impulsion = {
            "type": "impulsion_radar",
            "fort_emetteur": self.identite.id_fort,
            "timestamp": time.time(),
            "portee": 400,
            "demande_info_complete": True
        }
        
        # Broadcast local √©tendu
        for port in range(9000, 9020):
            if port != self.identite.port_reseau:
                self.envoyer_message_reseau(('127.0.0.1', port), impulsion)
        
        self.derniere_exploration = time.time()
    
    def consulter_fenetre_distante(self, id_fort_cible: str, type_fenetre: str = "publique"):
        """üîç Consulte fen√™tre d'un fort distant"""
        if id_fort_cible in self.carte_reseau:
            addr = self.carte_reseau[id_fort_cible]["addr_reseau"]
            
            demande = {
                "type": "demande_consultation_fenetre",
                "fort_source": self.identite.id_fort,
                "type_fenetre": type_fenetre,
                "timestamp": time.time()
            }
            
            self.envoyer_message_reseau(addr, demande)
            print(f"üîç Demande consultation fen√™tre {type_fenetre} vers {id_fort_cible}")
        else:
            print(f"‚ùå Fort {id_fort_cible} non trouv√© sur la carte r√©seau")
    
    def obtenir_stats_resumees(self) -> Dict:
        """Statistiques r√©sum√©es"""
        return {
            "forts_connus": len(self.carte_reseau) - 1,  # Exclure soi-m√™me
            "messages_total": self.stats_globales["messages_envoyes"] + self.stats_globales["messages_recus"],
            "consultations": self.stats_globales["consultations_fenetres"],
            "canaux": len(self.fenetres_canaux)
        }
    
    def obtenir_vue_complete(self) -> Dict:
        """Vue compl√®te du fort int√©gr√©"""
        return {
            "identite": asdict(self.identite),
            "donnees_privees": {k: len(v) for k, v in self.donnees_privees.items()},
            "fenetres": {
                "publique": {
                    "contenu_present": bool(self.fenetre_publique.contenu),
                    "consultations": self.fenetre_publique.stats_consultation["vues"],
                    "observateurs_uniques": len(self.fenetre_publique.stats_consultation["observateurs_uniques"])
                },
                "canaux_prives": len(self.fenetres_canaux)
            },
            "reseau": {
                "carte_forts": len(self.carte_reseau),
                "stats": self.stats_globales.copy(),
                "derniere_exploration": self.derniere_exploration
            }
        }
    
    def demarrer_fort_complet(self):
        """üöÄ D√©marre le fort complet int√©gr√©"""
        # Thread √©coute r√©seau
        thread_reseau = threading.Thread(target=self.ecouter_reseau_complet, daemon=True)
        thread_reseau.start()
        
        # Exploration initiale
        time.sleep(0.5)
        self.explorer_reseau_radar()
        
        return thread_reseau
    
    def arreter_fort_complet(self):
        """üõë Arr√™te le fort complet"""
        self.actif = False
        self.socket_reseau.close()


def demo_systeme_complet():
    """
    üé≠ D√©monstration du syst√®me complet int√©gr√©
    """
    print("=" * 80)
    print("üè∞ D√âMONSTRATION SYST√àME OPENRED NETWORK COMPLET")
    print("=" * 80)
    
    # Cr√©ation des forts complets
    print("\n1Ô∏è‚É£ Cr√©ation des forts complets...")
    forts = [
        FortCompletIntegre("Alice"),
        FortCompletIntegre("Bob"),
        FortCompletIntegre("Charlie")
    ]
    
    # Ajout de donn√©es priv√©es
    print("\n2Ô∏è‚É£ Ajout de donn√©es priv√©es...")
    forts[0].ajouter_donnee_privee("documents", "Journal secret d'Alice")
    forts[0].ajouter_donnee_privee("photos", "Vacances famille 2025")
    forts[1].ajouter_donnee_privee("projets", "Id√©e startup r√©volutionnaire")
    forts[2].ajouter_donnee_privee("notes", "Recettes de cuisine")
    
    # Publications publiques
    print("\n3Ô∏è‚É£ Publications dans les fen√™tres publiques...")
    forts[0].publier_dans_fenetre_publique("üåü Bonjour le r√©seau OpenRed depuis Alice !", "annonce")
    forts[1].publier_dans_fenetre_publique("üëã Bob connect√©, pr√™t √† √©changer !", "salutation")
    forts[2].publier_dans_fenetre_publique("üéØ Charlie explore les possibilit√©s du r√©seau", "exploration")
    
    # D√©marrage r√©seau complet
    print("\n4Ô∏è‚É£ D√©marrage du r√©seau complet...")
    threads = []
    for fort in forts:
        thread = fort.demarrer_fort_complet()
        threads.append(thread)
    
    # Exploration et d√©couverte
    print("\n5Ô∏è‚É£ Exploration et cartographie r√©seau...")
    for i in range(8):
        time.sleep(1)
        if i % 2 == 0:
            for fort in forts:
                fort.explorer_reseau_radar()
        print(f"   Phase exploration {i+1}/8...")
    
    # Consultations de fen√™tres
    print("\n6Ô∏è‚É£ Consultation des fen√™tres distantes...")
    time.sleep(1)
    
    # Alice consulte Bob
    forts[0].consulter_fenetre_distante(forts[1].identite.id_fort)
    time.sleep(0.5)
    
    # Bob consulte Charlie  
    forts[1].consulter_fenetre_distante(forts[2].identite.id_fort)
    time.sleep(0.5)
    
    # Charlie consulte Alice
    forts[2].consulter_fenetre_distante(forts[0].identite.id_fort)
    time.sleep(1)
    
    # Cr√©ation de canaux priv√©s
    print("\n7Ô∏è‚É£ Cr√©ation de canaux priv√©s...")
    # Alice demande canal avec Bob
    if forts[1].identite.id_fort in forts[0].carte_reseau:
        addr_bob = forts[0].carte_reseau[forts[1].identite.id_fort]["addr_reseau"]
        demande_canal = {
            "type": "demande_canal_prive",
            "fort_source": forts[0].identite.id_fort,
            "timestamp": time.time()
        }
        forts[0].envoyer_message_reseau(addr_bob, demande_canal)
    
    time.sleep(2)  # Laisser temps pour traitement
    
    # Analyse finale
    print("\n8Ô∏è‚É£ Analyse du syst√®me complet...")
    
    for i, fort in enumerate(forts):
        vue = fort.obtenir_vue_complete()
        
        print(f"\nüìä Fort {vue['identite']['nom']} ({vue['identite']['id_fort']}):")
        print(f"   Position: ({vue['identite']['position_x']:.0f},{vue['identite']['position_y']:.0f})")
        print(f"   Donn√©es priv√©es: {sum(vue['donnees_privees'].values())}")
        print(f"   Consultations fen√™tre publique: {vue['fenetres']['publique']['consultations']}")
        print(f"   Observateurs uniques: {vue['fenetres']['publique']['observateurs_uniques']}")
        print(f"   Canaux priv√©s: {vue['fenetres']['canaux_prives']}")
        print(f"   Forts sur carte: {vue['reseau']['carte_forts']}")
        print(f"   Messages √©chang√©s: {vue['reseau']['stats']['messages_envoyes']}‚Üë {vue['reseau']['stats']['messages_recus']}‚Üì")
        print(f"   Forts d√©couverts: {vue['reseau']['stats']['forts_decouverts']}")
    
    # √âvaluation finale
    print(f"\nüèÜ √âVALUATION SYST√àME COMPLET:")
    
    # M√©triques de succ√®s
    total_forts = len(forts)
    decouvertes_totales = sum(fort.stats_globales["forts_decouverts"] for fort in forts)
    consultations_totales = sum(fort.stats_globales["consultations_fenetres"] for fort in forts)
    canaux_totaux = sum(len(fort.fenetres_canaux) for fort in forts)
    messages_totaux = sum(fort.stats_globales["messages_envoyes"] + fort.stats_globales["messages_recus"] for fort in forts)
    
    decouverte_ok = decouvertes_totales >= total_forts * (total_forts - 1) * 0.8  # 80% d√©couverte
    communication_ok = messages_totaux > total_forts * 10  # Au moins 10 messages par fort
    fenetres_ok = consultations_totales > 0  # Au moins une consultation
    canaux_ok = canaux_totaux > 0  # Au moins un canal cr√©√©
    
    print(f"   D√©couverte r√©seau ({decouvertes_totales} d√©couvertes): {'‚úÖ' if decouverte_ok else '‚ùå'}")
    print(f"   Communication r√©seau ({messages_totaux} messages): {'‚úÖ' if communication_ok else '‚ùå'}")
    print(f"   Consultations fen√™tres ({consultations_totales}): {'‚úÖ' if fenetres_ok else '‚ùå'}")
    print(f"   Canaux priv√©s ({canaux_totaux}): {'‚úÖ' if canaux_ok else '‚ùå'}")
    
    systeme_complet_ok = decouverte_ok and communication_ok and fenetres_ok
    
    print(f"\nüéØ VERDICT SYST√àME COMPLET: {'üü¢ OP√âRATIONNEL' if systeme_complet_ok else 'üü° PARTIEL'}")
    
    if systeme_complet_ok:
        print("   ‚úÖ Syst√®me OpenRed Network COMPL√àTEMENT FONCTIONNEL !")
        print("   üè∞ Forts avec donn√©es priv√©es s√©curis√©es")
        print("   ü™ü Fen√™tres avec projections consultables √† distance")
        print("   üó∫Ô∏è Cartographie r√©seau automatique")
        print("   üåê Communication WAN int√©gr√©e")
        print("   ü§ù Canaux priv√©s entre forts")
        print("   üöÄ PR√äT POUR PRODUCTION !")
    else:
        print("   ‚ö†Ô∏è Quelques optimisations n√©cessaires")
        print("   üîß Syst√®me fonctionnel mais perfectible")
    
    # Nettoyage
    print(f"\n9Ô∏è‚É£ Arr√™t du syst√®me...")
    for fort in forts:
        fort.arreter_fort_complet()
    
    return systeme_complet_ok


if __name__ == "__main__":
    resultat = demo_systeme_complet()
    if resultat:
        print(f"\nüéâ SUCC√àS TOTAL ! OpenRed Network est OP√âRATIONNEL !")
        print(f"üöÄ Pr√™t pour optimisations avanc√©es et d√©ploiement !")
    else:
        print(f"\nüîß Syst√®me fonctionnel, optimisations recommand√©es")