#!/usr/bin/env python3
"""
üîê O-Red P2P Asymmetric Token Manager
Architecture r√©volutionnaire : 4 cl√©s RSA par relation d'amiti√©

Innovations :
- Tokens asym√©triques bilat√©raux  
- Non-r√©pudiation cryptographique absolue
- S√©curit√© quantique-ready
- Stockage local 100% d√©centralis√©

Auteur : Syst√®me OpenRed P2P R√©volutionnaire
Date : Septembre 2025
"""

import os
import json
import secrets
import base64
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime, timedelta
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, PublicFormat, NoEncryption

class P2PAsymmetricTokenManager:
    """
    üöÄ R√âVOLUTION CRYPTOGRAPHIQUE : Tokens P2P Asym√©triques
    
    Chaque relation d'amiti√© utilise 4 cl√©s RSA distinctes :
    
    Pierre ‚Üî Marie = 4 cl√©s cryptographiques
    
    Pierre ‚Üí Marie : 
      üîê Cl√© priv√©e token P‚ÜíM (Pierre garde secr√®te)
      üîë Cl√© publique token P‚ÜíM (Marie re√ßoit)
    
    Marie ‚Üí Pierre :
      üîê Cl√© priv√©e token M‚ÜíP (Marie garde secr√®te)  
      üîë Cl√© publique token M‚ÜíP (Pierre re√ßoit)
    
    R√©sultat : S√©curit√© exponentiellement renforc√©e !
    """
    
    def __init__(self, node_identity: Dict[str, Any], storage_path: str = None):
        """
        Initialiser le gestionnaire de tokens asym√©triques P2P
        
        Args:
            node_identity: Identit√© principale du n≈ìud
            storage_path: Chemin pour stockage local s√©curis√©
        """
        self.node_id = node_identity['node_id']
        self.node_private_key = node_identity['private_key']
        self.node_public_key = node_identity['public_key']
        
        # Stockage local des relations asym√©triques
        self.storage_path = storage_path or f"./{self.node_id}_asymmetric_tokens.json"
        
        # Structure : friend_node_id ‚Üí relation_data
        self.asymmetric_relationships = {}
        
        # Charger les relations existantes
        self._load_relationships()
        
        print(f"üîê [ASYMMETRIC TOKENS] Gestionnaire initialis√© pour n≈ìud : {self.node_id}")
    
    def establish_asymmetric_friendship(self, friend_node_id: str, friend_main_public_key, permissions: Dict[str, bool] = None) -> Dict[str, Any]:
        """
        ü§ù √âtablir une relation d'amiti√© avec tokens asym√©triques
        
        G√©n√®re une paire RSA sp√©cifique pour cette relation
        
        Args:
            friend_node_id: ID du n≈ìud ami
            friend_main_public_key: Cl√© publique principale de l'ami
            permissions: Permissions accord√©es √† l'ami
        
        Returns:
            Token public √† envoyer √† l'ami
        """
        print(f"üöÄ [ASYMMETRIC] √âtablissement relation avec {friend_node_id}")
        
        # 1. G√©n√©rer paire RSA sp√©cifique pour cette relation
        relationship_private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        relationship_public_key = relationship_private_key.public_key()
        
        # 2. Permissions par d√©faut si non sp√©cifi√©es
        if permissions is None:
            permissions = {
                "read_shared_files": True,
                "send_messages": True,
                "download_public_content": True,
                "access_private_folders": False,
                "modify_shared_docs": False,
                "voice_call": False
            }
        
        # 3. Cr√©er le token que JE donne √† mon ami
        outgoing_token_data = {
            "token_id": secrets.token_urlsafe(32),
            "relationship_id": f"{self.node_id}‚Üí{friend_node_id}",
            "issuer": self.node_id,
            "holder": friend_node_id,
            "token_type": "asymmetric_friendship",
            "created_at": datetime.utcnow().isoformat(),
            "expires_at": (datetime.utcnow() + timedelta(days=365)).isoformat(),
            "permissions": permissions,
            "relationship_fingerprint": self._generate_relationship_fingerprint(friend_node_id)
        }
        
        # 4. Signer avec la cl√© priv√©e sp√©cifique √† cette relation
        token_signature = self._sign_with_relationship_key(outgoing_token_data, relationship_private_key)
        outgoing_token_data["asymmetric_signature"] = token_signature
        
        # 5. Stocker la relation asym√©trique
        self.asymmetric_relationships[friend_node_id] = {
            "friend_node_id": friend_node_id,
            "established_at": datetime.utcnow().isoformat(),
            "status": "pending_response",
            
            # Token que JE donne √† l'ami
            "outgoing_token": {
                "private_key_pem": self._serialize_private_key(relationship_private_key),
                "public_key_pem": self._serialize_public_key(relationship_public_key),
                "token_data": outgoing_token_data
            },
            
            # Token que l'ami me donnera (vide pour l'instant)
            "incoming_token": None
        }
        
        # 6. Sauvegarder
        self._save_relationships()
        
        print(f"‚úÖ [ASYMMETRIC] Relation √©tablie - Token g√©n√©r√© pour {friend_node_id}")
        
        return {
            "token_public_key_pem": self._serialize_public_key(relationship_public_key),
            "token_data": outgoing_token_data,
            "instructions": f"Envoyer ce token √† {friend_node_id}"
        }
    
    def receive_asymmetric_token(self, friend_node_id: str, friend_token_public_key_pem: str, friend_token_data: Dict[str, Any]) -> bool:
        """
        üì® Recevoir le token asym√©trique de mon ami
        
        Args:
            friend_node_id: ID du n≈ìud ami
            friend_token_public_key_pem: Cl√© publique token de l'ami (PEM)
            friend_token_data: Donn√©es du token de l'ami
        
        Returns:
            True si token valide et accept√©
        """
        print(f"üì® [ASYMMETRIC] R√©ception token de {friend_node_id}")
        
        try:
            # 1. D√©s√©rialiser la cl√© publique de l'ami
            friend_token_public_key = serialization.load_pem_public_key(
                friend_token_public_key_pem.encode(),
                backend=default_backend()
            )
            
            # 2. V√©rifier la signature asym√©trique
            if not self._verify_token_signature(friend_token_data, friend_token_public_key):
                print(f"‚ùå [ASYMMETRIC] Signature invalide pour token de {friend_node_id}")
                return False
            
            # 3. V√©rifier que c'est bien pour moi
            if friend_token_data.get("holder") != self.node_id:
                print(f"‚ùå [ASYMMETRIC] Token non destin√© √† ce n≈ìud")
                return False
            
            # 4. Stocker la partie "incoming" de la relation
            if friend_node_id in self.asymmetric_relationships:
                self.asymmetric_relationships[friend_node_id]["incoming_token"] = {
                    "friend_public_key_pem": friend_token_public_key_pem,
                    "token_data": friend_token_data
                }
                self.asymmetric_relationships[friend_node_id]["status"] = "active"
            else:
                # Cr√©er nouvelle relation si pas encore initi√©e de mon c√¥t√©
                self.asymmetric_relationships[friend_node_id] = {
                    "friend_node_id": friend_node_id,
                    "established_at": datetime.utcnow().isoformat(),
                    "status": "active",
                    "outgoing_token": None,
                    "incoming_token": {
                        "friend_public_key_pem": friend_token_public_key_pem,
                        "token_data": friend_token_data
                    }
                }
            
            # 5. Sauvegarder
            self._save_relationships()
            
            print(f"‚úÖ [ASYMMETRIC] Token accept√© de {friend_node_id} - Relation active")
            return True
            
        except Exception as e:
            print(f"‚ùå [ASYMMETRIC] Erreur r√©ception token : {str(e)}")
            return False
    
    def authorize_friend_action(self, friend_node_id: str, requested_action: str, action_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        üîê Autoriser une action de mon ami avec preuve asym√©trique
        
        L'ami doit envoyer une demande sign√©e avec SA cl√© priv√©e token
        Je r√©ponds avec une autorisation sign√©e avec MA cl√© priv√©e token
        
        Args:
            friend_node_id: ID du n≈ìud ami
            requested_action: Action demand√©e
            action_data: Donn√©es de la demande (incluant signature ami)
        
        Returns:
            Autorisation sign√©e ou refus
        """
        print(f"üîê [AUTHORIZE] {friend_node_id} demande : {requested_action}")
        
        # 1. V√©rifier que la relation existe
        if friend_node_id not in self.asymmetric_relationships:
            return {"authorized": False, "reason": "Relation inexistante"}
        
        relationship = self.asymmetric_relationships[friend_node_id]
        
        # 2. V√©rifier que j'ai le token entrant de l'ami
        incoming_token = relationship.get("incoming_token")
        if not incoming_token:
            return {"authorized": False, "reason": "Token ami manquant"}
        
        # 3. V√©rifier les permissions dans le token que l'ami m'a donn√©
        friend_permissions = incoming_token["token_data"]["permissions"]
        if requested_action not in friend_permissions or not friend_permissions[requested_action]:
            return {"authorized": False, "reason": f"Permission {requested_action} non accord√©e"}
        
        # 4. V√©rifier la signature de la demande avec la cl√© publique token de l'ami
        if action_data and "request_signature" in action_data:
            friend_public_key = serialization.load_pem_public_key(
                incoming_token["friend_public_key_pem"].encode(),
                backend=default_backend()
            )
            
            if not self._verify_request_signature(action_data, friend_public_key):
                return {"authorized": False, "reason": "Signature demande invalide"}
        
        # 5. G√©n√©rer autorisation sign√©e avec MA cl√© priv√©e token
        authorization = {
            "authorized": True,
            "action": requested_action,
            "friend_node_id": friend_node_id,
            "authorized_by": self.node_id,
            "timestamp": datetime.utcnow().isoformat(),
            "authorization_id": secrets.token_urlsafe(16)
        }
        
        # 6. Signer avec MA cl√© priv√©e sp√©cifique √† cette relation
        outgoing_token = relationship.get("outgoing_token")
        if outgoing_token:
            my_private_key = serialization.load_pem_private_key(
                outgoing_token["private_key_pem"].encode(),
                password=None,
                backend=default_backend()
            )
            
            authorization["asymmetric_authorization_signature"] = self._sign_with_relationship_key(authorization, my_private_key)
        
        print(f"‚úÖ [AUTHORIZE] Action {requested_action} autoris√©e pour {friend_node_id}")
        return authorization
    
    def request_friend_action(self, friend_node_id: str, action: str, action_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        üì§ Demander une action chez mon ami avec preuve asym√©trique
        
        Je signe ma demande avec MA cl√© priv√©e token
        L'ami v√©rifiera avec MA cl√© publique token
        
        Args:
            friend_node_id: ID du n≈ìud ami
            action: Action demand√©e
            action_data: Donn√©es suppl√©mentaires
        
        Returns:
            Demande sign√©e cryptographiquement
        """
        print(f"üì§ [REQUEST] Demande {action} vers {friend_node_id}")
        
        # 1. V√©rifier que la relation existe
        if friend_node_id not in self.asymmetric_relationships:
            return {"error": "Relation inexistante"}
        
        relationship = self.asymmetric_relationships[friend_node_id]
        outgoing_token = relationship.get("outgoing_token")
        
        if not outgoing_token:
            return {"error": "Token sortant manquant"}
        
        # 2. Cr√©er la demande
        request = {
            "requester": self.node_id,
            "target": friend_node_id,
            "action": action,
            "data": action_data or {},
            "timestamp": datetime.utcnow().isoformat(),
            "request_id": secrets.token_urlsafe(16),
            "token_id": outgoing_token["token_data"]["token_id"]
        }
        
        # 3. Signer avec MA cl√© priv√©e sp√©cifique √† cette relation
        my_private_key = serialization.load_pem_private_key(
            outgoing_token["private_key_pem"].encode(),
            password=None,
            backend=default_backend()
        )
        
        request["request_signature"] = self._sign_with_relationship_key(request, my_private_key)
        
        print(f"‚úÖ [REQUEST] Demande {action} sign√©e pour {friend_node_id}")
        return request
    
    def list_relationships(self) -> List[Dict[str, Any]]:
        """
        üìã Lister toutes les relations asym√©triques
        """
        relationships = []
        
        for friend_id, relationship in self.asymmetric_relationships.items():
            relationships.append({
                "friend_node_id": friend_id,
                "status": relationship["status"],
                "established_at": relationship["established_at"],
                "has_outgoing_token": relationship["outgoing_token"] is not None,
                "has_incoming_token": relationship["incoming_token"] is not None,
                "outgoing_permissions": relationship["outgoing_token"]["token_data"]["permissions"] if relationship["outgoing_token"] else None,
                "incoming_permissions": relationship["incoming_token"]["token_data"]["permissions"] if relationship["incoming_token"] else None
            })
        
        return relationships
    
    def revoke_friend_access(self, friend_node_id: str, direction: str = "both") -> bool:
        """
        üö´ R√©voquer l'acc√®s d'un ami (asym√©trique)
        
        Args:
            friend_node_id: ID du n≈ìud ami
            direction: "outgoing", "incoming", ou "both"
        
        Returns:
            True si r√©vocation r√©ussie
        """
        if friend_node_id not in self.asymmetric_relationships:
            return False
        
        relationship = self.asymmetric_relationships[friend_node_id]
        
        if direction in ["outgoing", "both"] and relationship["outgoing_token"]:
            # Marquer le token sortant comme r√©voqu√©
            relationship["outgoing_token"]["token_data"]["status"] = "revoked"
            relationship["outgoing_token"]["token_data"]["revoked_at"] = datetime.utcnow().isoformat()
        
        if direction in ["incoming", "both"] and relationship["incoming_token"]:
            # Supprimer le token entrant
            relationship["incoming_token"] = None
        
        if direction == "both":
            relationship["status"] = "revoked"
        
        self._save_relationships()
        print(f"üö´ [REVOKE] Acc√®s r√©voqu√© pour {friend_node_id} (direction: {direction})")
        return True
    
    # === M√âTHODES UTILITAIRES CRYPTOGRAPHIQUES ===
    
    def _sign_with_relationship_key(self, data: Dict[str, Any], private_key) -> str:
        """Signer des donn√©es avec une cl√© priv√©e de relation"""
        data_string = json.dumps(data, sort_keys=True, default=str)
        signature = private_key.sign(
            data_string.encode(),
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        return base64.b64encode(signature).decode()
    
    def _verify_token_signature(self, token_data: Dict[str, Any], public_key) -> bool:
        """V√©rifier la signature d'un token"""
        try:
            signature_b64 = token_data.pop("asymmetric_signature")
            signature = base64.b64decode(signature_b64)
            
            data_string = json.dumps(token_data, sort_keys=True, default=str)
            
            public_key.verify(
                signature,
                data_string.encode(),
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            
            # Remettre la signature dans le token
            token_data["asymmetric_signature"] = signature_b64
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification signature : {str(e)}")
            # Remettre la signature m√™me en cas d'erreur
            if 'signature_b64' in locals():
                token_data["asymmetric_signature"] = signature_b64
            return False
    
    def _verify_request_signature(self, request_data: Dict[str, Any], public_key) -> bool:
        """V√©rifier la signature d'une demande"""
        try:
            signature_b64 = request_data.get("request_signature")
            if not signature_b64:
                return False
            
            # Copier sans la signature pour v√©rification
            data_copy = {k: v for k, v in request_data.items() if k != "request_signature"}
            signature = base64.b64decode(signature_b64)
            
            data_string = json.dumps(data_copy, sort_keys=True, default=str)
            
            public_key.verify(
                signature,
                data_string.encode(),
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification signature demande : {str(e)}")
            return False
    
    def _generate_relationship_fingerprint(self, friend_node_id: str) -> str:
        """G√©n√©rer empreinte unique pour une relation"""
        combined = f"{self.node_id}:{friend_node_id}:{datetime.utcnow().date().isoformat()}"
        return base64.b64encode(combined.encode()).decode()[:16]
    
    def _serialize_private_key(self, private_key) -> str:
        """S√©rialiser cl√© priv√©e en PEM"""
        return private_key.private_bytes(
            encoding=Encoding.PEM,
            format=PrivateFormat.PKCS8,
            encryption_algorithm=NoEncryption()
        ).decode()
    
    def _serialize_public_key(self, public_key) -> str:
        """S√©rialiser cl√© publique en PEM"""
        return public_key.public_bytes(
            encoding=Encoding.PEM,
            format=PublicFormat.SubjectPublicKeyInfo
        ).decode()
    
    # === PERSISTANCE LOCALE ===
    
    def _save_relationships(self):
        """Sauvegarder relations dans fichier local"""
        try:
            with open(self.storage_path, 'w', encoding='utf-8') as f:
                json.dump({
                    "node_id": self.node_id,
                    "saved_at": datetime.utcnow().isoformat(),
                    "relationships": self.asymmetric_relationships
                }, f, indent=2, default=str)
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde : {str(e)}")
    
    def _load_relationships(self):
        """Charger relations depuis fichier local"""
        try:
            if os.path.exists(self.storage_path):
                with open(self.storage_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.asymmetric_relationships = data.get("relationships", {})
                    print(f"‚úÖ Relations charg√©es : {len(self.asymmetric_relationships)} relations")
        except Exception as e:
            print(f"‚ùå Erreur chargement : {str(e)}")
            self.asymmetric_relationships = {}


def demo_asymmetric_tokens():
    """
    üéØ D√©monstration compl√®te du syst√®me de tokens asym√©triques
    """
    print("üöÄ === D√âMONSTRATION TOKENS P2P ASYM√âTRIQUES ===\n")
    
    # === SETUP N≈íUDS ===
    
    # G√©n√©ration identit√©s principales
    pierre_main_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())
    marie_main_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())
    
    pierre_identity = {
        "node_id": "pierre_tech_node",
        "private_key": pierre_main_key,
        "public_key": pierre_main_key.public_key()
    }
    
    marie_identity = {
        "node_id": "marie_health_node", 
        "private_key": marie_main_key,
        "public_key": marie_main_key.public_key()
    }
    
    # Initialisation gestionnaires
    pierre_manager = P2PAsymmetricTokenManager(pierre_identity, "pierre_tokens.json")
    marie_manager = P2PAsymmetricTokenManager(marie_identity, "marie_tokens.json")
    
    print("‚úÖ N≈ìuds Pierre et Marie initialis√©s\n")
    
    # === √âTABLISSEMENT RELATION ASYM√âTRIQUE ===
    
    print("ü§ù === √âTABLISSEMENT RELATION ASYM√âTRIQUE ===")
    
    # Pierre g√©n√®re token pour Marie
    pierre_permissions = {
        "read_tech_articles": True,
        "download_code_samples": True,
        "send_messages": True,
        "access_private_projects": False,
        "modify_shared_code": False
    }
    
    pierre_token_for_marie = pierre_manager.establish_asymmetric_friendship(
        "marie_health_node",
        marie_identity["public_key"],
        pierre_permissions
    )
    
    # Marie g√©n√®re token pour Pierre
    marie_permissions = {
        "read_health_research": True,
        "download_public_papers": True,
        "send_messages": True,
        "access_patient_data": False,
        "modify_research_data": False
    }
    
    marie_token_for_pierre = marie_manager.establish_asymmetric_friendship(
        "pierre_tech_node",
        pierre_identity["public_key"], 
        marie_permissions
    )
    
    # √âchange crois√© des tokens
    pierre_accepts = pierre_manager.receive_asymmetric_token(
        "marie_health_node",
        marie_token_for_pierre["token_public_key_pem"],
        marie_token_for_pierre["token_data"]
    )
    
    marie_accepts = marie_manager.receive_asymmetric_token(
        "pierre_tech_node",
        pierre_token_for_marie["token_public_key_pem"],
        pierre_token_for_marie["token_data"]
    )
    
    print(f"Pierre accepte Marie : {pierre_accepts}")
    print(f"Marie accepte Pierre : {marie_accepts}\n")
    
    # === UTILISATION ASYM√âTRIQUE ===
    
    print("üîê === UTILISATION ASYM√âTRIQUE ===")
    
    # Pierre demande √† t√©l√©charger un document de Marie
    pierre_request = pierre_manager.request_friend_action(
        "marie_health_node",
        "download_public_papers",
        {"document_id": "covid_research_2025.pdf", "format": "pdf"}
    )
    
    print("üì§ Pierre demande t√©l√©chargement (sign√© asym√©triquement)")
    print(f"Request ID : {pierre_request['request_id']}")
    
    # Marie autorise la demande de Pierre
    marie_authorization = marie_manager.authorize_friend_action(
        "pierre_tech_node",
        "download_public_papers", 
        pierre_request
    )
    
    print("‚úÖ Marie autorise (sign√© asym√©triquement)")
    print(f"Autoris√© : {marie_authorization['authorized']}")
    print(f"Authorization ID : {marie_authorization.get('authorization_id')}\n")
    
    # === √âTAT DES RELATIONS ===
    
    print("üìã === √âTAT DES RELATIONS ASYM√âTRIQUES ===")
    
    pierre_relations = pierre_manager.list_relationships()
    marie_relations = marie_manager.list_relationships()
    
    print("Pierre voit :")
    for rel in pierre_relations:
        print(f"  - {rel['friend_node_id']} : {rel['status']}")
        print(f"    Permissions accord√©es : {list(rel['outgoing_permissions'].keys()) if rel['outgoing_permissions'] else 'Aucune'}")
        print(f"    Permissions re√ßues : {list(rel['incoming_permissions'].keys()) if rel['incoming_permissions'] else 'Aucune'}")
    
    print("\nMarie voit :")
    for rel in marie_relations:
        print(f"  - {rel['friend_node_id']} : {rel['status']}")
        print(f"    Permissions accord√©es : {list(rel['outgoing_permissions'].keys()) if rel['outgoing_permissions'] else 'Aucune'}")
        print(f"    Permissions re√ßues : {list(rel['incoming_permissions'].keys()) if rel['incoming_permissions'] else 'Aucune'}")
    
    print("\nüéâ === D√âMONSTRATION TERMIN√âE ===")
    print("üîê Syst√®me de tokens P2P asym√©triques op√©rationnel !")
    print("‚úÖ 4 cl√©s RSA par relation - S√©curit√© maximale")
    print("üöÄ Non-r√©pudiation cryptographique absolue")


if __name__ == "__main__":
    demo_asymmetric_tokens()