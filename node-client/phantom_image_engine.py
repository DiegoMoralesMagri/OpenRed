#!/usr/bin/env python3
"""
üëª O-Red Phantom Image System - R√©volution des Images Fant√¥mes
Architecture optimis√©e : Lazy Loading + Push Notifications

Innovation r√©volutionnaire :
- Images fant√¥mes qui n'existent que chez le propri√©taire
- V√©rification √† la demande pour √©conomiser les ressources
- Push notifications pour suppression instantan√©e
- Anti-capture int√©gr√© avec rendu s√©curis√©

Auteur : Syst√®me OpenRed R√©volutionnaire
Date : Septembre 2025
"""

import asyncio
import json
import secrets
import hashlib
import base64
import time
from typing import Dict, Any, Optional, List, Callable
from datetime import datetime, timedelta
from pathlib import Path
from dataclasses import dataclass, asdict
import io

# Import de nos modules r√©volutionnaires
from p2p_asymmetric_token_manager import P2PAsymmetricTokenManager

@dataclass
class PhantomImageMetadata:
    """üìã M√©tadonn√©es d'une image fant√¥me"""
    phantom_id: str
    owner_node_id: str
    original_filename: str
    content_hash: str  # Hash de l'image originale
    created_at: str
    last_validated: str
    permissions: Dict[str, Any]
    access_token: str  # Token asym√©trique d'acc√®s

class PhantomImageEngine:
    """
    üëª Moteur d'Images Fant√¥mes R√©volutionnaire
    
    Architecture optimis√©e par l'utilisateur :
    
    üì• CONSULTATION (Lazy Loading) :
    1. User veut voir image ‚Üí Query API de v√©rification
    2. Si OK ‚Üí Stream et affichage
    3. Si KO ‚Üí Image noire
    
    üì§ SUPPRESSION (Push Notifications) :
    1. Owner supprime ‚Üí Push notification aux viewers
    2. Image devient noire instantan√©ment
    3. Prochaine consultation ‚Üí Refus√©e
    
    üöÄ R√©sultat : Performance optimale + Exp√©rience parfaite !
    """
    
    def __init__(self, node_id: str, asymmetric_tokens: P2PAsymmetricTokenManager):
        self.node_id = node_id
        self.tokens = asymmetric_tokens
        
        # Stockage des images fant√¥mes locales
        self.phantom_images = {}  # phantom_id -> PhantomImageMetadata
        
        # Stockage des images r√©elles (si propri√©taire)
        self.owned_images = {}  # image_id -> image_data
        
        # Cache de validation pour √©viter les requ√™tes r√©p√©t√©es
        self.validation_cache = {}  # phantom_id -> (timestamp, valid)
        
        # Abonn√©s aux notifications (qui a quelles images fant√¥mes)
        self.subscribers = {}  # image_id -> List[node_id]
        
        # Callbacks pour les notifications UI
        self.on_image_deleted_callbacks = []
        self.on_image_restricted_callbacks = []
        
        print(f"üëª [PHANTOM ENGINE] Initialis√© pour {node_id}")
    
    def create_phantom_image(self, image_path: str, owner_permissions: Dict[str, Any] = None) -> str:
        """
        üì∏ Cr√©er une image r√©elle et g√©n√©rer sa r√©f√©rence fant√¥me
        
        Args:
            image_path: Chemin vers l'image r√©elle
            owner_permissions: Permissions d'acc√®s par d√©faut
        
        Returns:
            phantom_id de l'image cr√©√©e
        """
        if not Path(image_path).exists():
            raise FileNotFoundError(f"Image introuvable : {image_path}")
        
        # Lire et hasher l'image
        with open(image_path, 'rb') as f:
            image_data = f.read()
        
        content_hash = hashlib.sha256(image_data).hexdigest()
        image_id = secrets.token_urlsafe(32)
        
        # Permissions par d√©faut
        if owner_permissions is None:
            owner_permissions = {
                "public_view": False,
                "friends_view": True,
                "download_allowed": False,
                "expiry_date": None
            }
        
        # Stocker l'image r√©elle (nous sommes le propri√©taire)
        self.owned_images[image_id] = {
            "data": image_data,
            "filename": Path(image_path).name,
            "content_hash": content_hash,
            "permissions": owner_permissions,
            "created_at": datetime.utcnow().isoformat(),
            "active": True
        }
        
        # Initialiser liste des abonn√©s
        self.subscribers[image_id] = []
        
        print(f"üì∏ [CREATE] Image r√©elle cr√©√©e : {image_id}")
        print(f"   üìÅ Fichier : {Path(image_path).name}")
        print(f"   üîê Hash : {content_hash[:16]}...")
        print(f"   üëÄ Permissions : {list(owner_permissions.keys())}")
        
        return image_id
    
    def get_phantom_reference(self, image_id: str, requester_node_id: str) -> Optional[Dict[str, Any]]:
        """
        üéØ G√©n√©rer une r√©f√©rence fant√¥me pour un utilisateur
        
        L'utilisateur recevra cette r√©f√©rence qu'il pourra utiliser
        pour afficher l'image (mais pas la poss√©der r√©ellement)
        
        Args:
            image_id: ID de l'image r√©elle
            requester_node_id: N≈ìud qui demande l'acc√®s
        
        Returns:
            R√©f√©rence fant√¥me ou None si acc√®s refus√©
        """
        if image_id not in self.owned_images:
            print(f"‚ùå [PHANTOM REF] Image {image_id} inexistante")
            return None
        
        image_info = self.owned_images[image_id]
        
        # V√©rifier permissions
        if not self._check_permissions(image_info["permissions"], requester_node_id):
            print(f"‚ùå [PHANTOM REF] Acc√®s refus√© pour {requester_node_id}")
            return None
        
        # G√©n√©rer token d'acc√®s asym√©trique
        access_token = self.tokens.request_friend_action(
            requester_node_id,
            "view_phantom_image",
            {"image_id": image_id, "content_hash": image_info["content_hash"]}
        )
        
        # Cr√©er r√©f√©rence fant√¥me
        phantom_id = secrets.token_urlsafe(32)
        phantom_ref = {
            "phantom_id": phantom_id,
            "owner_node_id": self.node_id,
            "original_filename": image_info["filename"],
            "content_hash": image_info["content_hash"],
            "access_token": access_token,
            "validation_endpoint": f"phantom_validate/{image_id}",
            "stream_endpoint": f"phantom_stream/{image_id}",
            "created_at": datetime.utcnow().isoformat()
        }
        
        # Ajouter l'utilisateur aux abonn√©s
        if requester_node_id not in self.subscribers[image_id]:
            self.subscribers[image_id].append(requester_node_id)
        
        print(f"üëª [PHANTOM REF] R√©f√©rence g√©n√©r√©e pour {requester_node_id}")
        print(f"   üÜî Phantom ID : {phantom_id}")
        print(f"   üîê Token d'acc√®s g√©n√©r√©")
        
        return phantom_ref
    
    def register_phantom_image(self, phantom_ref: Dict[str, Any]):
        """
        üìù Enregistrer une image fant√¥me re√ßue d'un autre n≈ìud
        
        Args:
            phantom_ref: R√©f√©rence fant√¥me re√ßue
        """
        phantom_id = phantom_ref["phantom_id"]
        
        # Cr√©er m√©tadonn√©es locales
        metadata = PhantomImageMetadata(
            phantom_id=phantom_id,
            owner_node_id=phantom_ref["owner_node_id"],
            original_filename=phantom_ref["original_filename"],
            content_hash=phantom_ref["content_hash"],
            created_at=phantom_ref["created_at"],
            last_validated=datetime.utcnow().isoformat(),
            permissions={},  # Sera v√©rifi√© √† la demande
            access_token=phantom_ref["access_token"]
        )
        
        self.phantom_images[phantom_id] = metadata
        
        print(f"üìù [REGISTER] Image fant√¥me enregistr√©e : {phantom_id}")
        print(f"   üë§ Propri√©taire : {phantom_ref['owner_node_id']}")
        print(f"   üìÅ Fichier : {phantom_ref['original_filename']}")
    
    async def validate_phantom_image(self, phantom_id: str, force_refresh: bool = False) -> bool:
        """
        üîç Valider qu'une image fant√¥me existe toujours (LAZY LOADING)
        
        Cette m√©thode impl√©mente votre optimisation :
        - V√©rification uniquement quand l'utilisateur veut voir l'image
        - Cache pour √©viter les requ√™tes r√©p√©t√©es
        - Query API du propri√©taire
        
        Args:
            phantom_id: ID de l'image fant√¥me
            force_refresh: Forcer la re-v√©rification
        
        Returns:
            True si l'image est toujours accessible
        """
        if phantom_id not in self.phantom_images:
            return False
        
        metadata = self.phantom_images[phantom_id]
        
        # V√©rifier cache de validation (√©conomise les requ√™tes)
        cache_key = phantom_id
        now = time.time()
        
        if not force_refresh and cache_key in self.validation_cache:
            cache_time, is_valid = self.validation_cache[cache_key]
            # Cache valide pendant 1 minute
            if now - cache_time < 60:
                print(f"üîç [VALIDATE] Cache hit pour {phantom_id} : {'‚úÖ' if is_valid else '‚ùå'}")
                return is_valid
        
        print(f"üîç [VALIDATE] Validation √† la demande de {phantom_id}")
        print(f"   üë§ Propri√©taire : {metadata.owner_node_id}")
        
        # Simuler query API du propri√©taire
        is_valid = await self._query_owner_validation(metadata)
        
        # Mettre √† jour cache
        self.validation_cache[cache_key] = (now, is_valid)
        
        # Mettre √† jour m√©tadonn√©es
        metadata.last_validated = datetime.utcnow().isoformat()
        
        result = "‚úÖ Accessible" if is_valid else "‚ùå Plus accessible"
        print(f"   üéØ R√©sultat : {result}")
        
        return is_valid
    
    async def view_phantom_image(self, phantom_id: str) -> Optional[bytes]:
        """
        üëÄ Voir une image fant√¥me (avec validation lazy)
        
        Impl√©mente votre architecture optimis√©e :
        1. Validation √† la demande
        2. Si OK ‚Üí Stream de l'image
        3. Si KO ‚Üí Image noire
        
        Args:
            phantom_id: ID de l'image fant√¥me
        
        Returns:
            Donn√©es image ou None si inaccessible
        """
        print(f"üëÄ [VIEW] Demande de visualisation : {phantom_id}")
        
        # √âtape 1 : Validation lazy loading
        is_valid = await self.validate_phantom_image(phantom_id)
        
        if not is_valid:
            print(f"‚ùå [VIEW] Image inaccessible ‚Üí Image noire")
            return self._generate_black_image()
        
        # √âtape 2 : Stream de l'image depuis le propri√©taire
        print(f"‚úÖ [VIEW] Image valide ‚Üí Stream en cours")
        image_data = await self._stream_from_owner(phantom_id)
        
        if image_data:
            print(f"üì∫ [VIEW] Image stream√©e avec succ√®s ({len(image_data)} bytes)")
            return image_data
        else:
            print(f"‚ùå [VIEW] √âchec stream ‚Üí Image noire")
            return self._generate_black_image()
    
    def delete_owned_image(self, image_id: str):
        """
        üóëÔ∏è Supprimer une image poss√©d√©e (avec push notifications)
        
        Impl√©mente votre syst√®me de notifications :
        1. Marquer l'image comme supprim√©e
        2. Push notification √† tous les abonn√©s
        3. Images fant√¥mes ‚Üí Noires instantan√©ment
        
        Args:
            image_id: ID de l'image √† supprimer
        """
        if image_id not in self.owned_images:
            print(f"‚ùå [DELETE] Image {image_id} introuvable")
            return
        
        image_info = self.owned_images[image_id]
        
        print(f"üóëÔ∏è [DELETE] Suppression de l'image : {image_id}")
        print(f"   üìÅ Fichier : {image_info['filename']}")
        
        # √âtape 1 : Marquer comme supprim√©e
        image_info["active"] = False
        image_info["deleted_at"] = datetime.utcnow().isoformat()
        
        # √âtape 2 : Push notifications aux abonn√©s
        subscribers = self.subscribers.get(image_id, [])
        print(f"   üì§ Push notifications ‚Üí {len(subscribers)} abonn√©s")
        
        for subscriber_node in subscribers:
            self._send_deletion_notification(subscriber_node, image_id)
        
        # √âtape 3 : Nettoyer
        del self.owned_images[image_id]
        if image_id in self.subscribers:
            del self.subscribers[image_id]
        
        print(f"‚úÖ [DELETE] Image supprim√©e avec notifications envoy√©es")
    
    def restrict_image_access(self, image_id: str, new_permissions: Dict[str, Any]):
        """
        üîí Modifier les permissions d'une image (avec push notifications)
        
        Args:
            image_id: ID de l'image
            new_permissions: Nouvelles permissions
        """
        if image_id not in self.owned_images:
            return
        
        print(f"üîí [RESTRICT] Modification permissions : {image_id}")
        
        old_permissions = self.owned_images[image_id]["permissions"]
        self.owned_images[image_id]["permissions"] = new_permissions
        
        # Notifier les abonn√©s de la restriction
        subscribers = self.subscribers.get(image_id, [])
        for subscriber_node in subscribers:
            self._send_restriction_notification(subscriber_node, image_id, new_permissions)
        
        print(f"‚úÖ [RESTRICT] Permissions modifi√©es avec notifications")
    
    def list_phantom_images(self) -> List[Dict[str, Any]]:
        """üìã Lister toutes les images fant√¥mes locales"""
        phantom_list = []
        
        for phantom_id, metadata in self.phantom_images.items():
            phantom_list.append({
                "phantom_id": phantom_id,
                "owner": metadata.owner_node_id,
                "filename": metadata.original_filename,
                "created_at": metadata.created_at,
                "last_validated": metadata.last_validated
            })
        
        return phantom_list
    
    def list_owned_images(self) -> List[Dict[str, Any]]:
        """üìã Lister toutes les images poss√©d√©es"""
        owned_list = []
        
        for image_id, image_info in self.owned_images.items():
            subscribers = self.subscribers.get(image_id, [])
            owned_list.append({
                "image_id": image_id,
                "filename": image_info["filename"],
                "created_at": image_info["created_at"],
                "active": image_info["active"],
                "subscribers_count": len(subscribers),
                "permissions": image_info["permissions"]
            })
        
        return owned_list
    
    # === M√âTHODES PRIV√âES ===
    
    async def _query_owner_validation(self, metadata: PhantomImageMetadata) -> bool:
        """üîç Query API du propri√©taire pour valider l'image"""
        # Simulation de la requ√™te r√©seau
        await asyncio.sleep(0.1)  # Latence r√©seau simul√©e
        
        # Ici on ferait une vraie requ√™te HTTP/P2P au propri√©taire
        # Pour la d√©mo, on simule avec une logique simple
        
        owner_node = metadata.owner_node_id
        
        # V√©rifier si le propri√©taire est dans nos amis
        friendships = self.tokens.list_relationships()
        owner_is_friend = any(f["friend_node_id"] == owner_node for f in friendships)
        
        if not owner_is_friend:
            return False
        
        # Simuler diff√©rentes conditions
        return True  # Pour la d√©mo, toujours valide
    
    async def _stream_from_owner(self, phantom_id: str) -> Optional[bytes]:
        """üì∫ Stream de l'image depuis le propri√©taire"""
        metadata = self.phantom_images[phantom_id]
        
        # Simulation du streaming
        await asyncio.sleep(0.2)  # Latence de streaming simul√©e
        
        # Pour la d√©mo, g√©n√©rer une image de test
        return self._generate_test_image(metadata.original_filename)
    
    def _generate_black_image(self) -> bytes:
        """‚ö´ G√©n√©rer une image noire (quand l'acc√®s est refus√©)"""
        # Image noire 100x100 en PNG
        black_png = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00d\x00\x00\x00d\x08\x02\x00\x00\x00\xff\x80\x02\x03\x00\x00\x00\x19IDATx\x9c\xed\xc1\x01\x01\x00\x00\x00\x80\x90\xfe\xaf\xee\x08\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00IEND\xaeB`\x82'
        return black_png
    
    def _generate_test_image(self, filename: str) -> bytes:
        """üñºÔ∏è G√©n√©rer une image de test pour la d√©mo"""
        # Pour la d√©mo, on g√©n√®re toujours la m√™me image test
        # En r√©alit√©, ce serait stream√© depuis le propri√©taire
        return self._generate_black_image()  # Placeholder
    
    def _check_permissions(self, permissions: Dict[str, Any], requester_node_id: str) -> bool:
        """üîê V√©rifier les permissions d'acc√®s"""
        # Logique simple pour la d√©mo
        if permissions.get("public_view", False):
            return True
        
        if permissions.get("friends_view", False):
            friendships = self.tokens.list_relationships()
            return any(f["friend_node_id"] == requester_node_id for f in friendships)
        
        return False
    
    def _send_deletion_notification(self, subscriber_node: str, image_id: str):
        """üì§ Envoyer notification de suppression"""
        notification = {
            "type": "phantom_image_deleted",
            "image_id": image_id,
            "deleted_at": datetime.utcnow().isoformat(),
            "sender": self.node_id
        }
        
        # Ici on enverrait via le syst√®me P2P
        print(f"üì§ [PUSH] Notification suppression ‚Üí {subscriber_node}")
        
        # D√©clencher callbacks locaux
        for callback in self.on_image_deleted_callbacks:
            callback(image_id, subscriber_node)
    
    def _send_restriction_notification(self, subscriber_node: str, image_id: str, new_permissions: Dict[str, Any]):
        """üì§ Envoyer notification de restriction"""
        notification = {
            "type": "phantom_image_restricted",
            "image_id": image_id,
            "new_permissions": new_permissions,
            "restricted_at": datetime.utcnow().isoformat(),
            "sender": self.node_id
        }
        
        print(f"üì§ [PUSH] Notification restriction ‚Üí {subscriber_node}")
        
        for callback in self.on_image_restricted_callbacks:
            callback(image_id, subscriber_node, new_permissions)
    
    # === CALLBACKS POUR L'UI ===
    
    def add_deletion_callback(self, callback: Callable[[str, str], None]):
        """Ajouter callback pour suppression d'image"""
        self.on_image_deleted_callbacks.append(callback)
    
    def add_restriction_callback(self, callback: Callable[[str, str, Dict[str, Any]], None]):
        """Ajouter callback pour restriction d'image"""
        self.on_image_restricted_callbacks.append(callback)


async def demo_phantom_image_system():
    """
    üéØ D√©monstration du syst√®me d'images fant√¥mes optimis√©
    
    Sc√©nario :
    1. Alice cr√©e une image r√©elle
    2. Bob re√ßoit une r√©f√©rence fant√¥me
    3. Bob consulte l'image ‚Üí Validation lazy + Stream
    4. Alice supprime l'image ‚Üí Push notification
    5. Bob essaie de revoir l'image ‚Üí Image noire
    """
    print("üëª === D√âMONSTRATION SYST√àME IMAGES FANT√îMES ===\n")
    
    # Import des modules n√©cessaires
    from cryptography.hazmat.primitives.asymmetric import rsa
    from cryptography.hazmat.backends import default_backend
    
    # === SETUP DES N≈íUDS ===
    
    # Alice (propri√©taire d'images)
    alice_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())
    alice_identity = {
        "node_id": "alice_photographer",
        "private_key": alice_key,
        "public_key": alice_key.public_key()
    }
    
    alice_tokens = P2PAsymmetricTokenManager(alice_identity, "alice_phantom_tokens.json")
    alice_phantom = PhantomImageEngine("alice_photographer", alice_tokens)
    
    # Bob (utilisateur d'images fant√¥mes)
    bob_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())
    bob_identity = {
        "node_id": "bob_viewer",
        "private_key": bob_key,
        "public_key": bob_key.public_key()
    }
    
    bob_tokens = P2PAsymmetricTokenManager(bob_identity, "bob_phantom_tokens.json")
    bob_phantom = PhantomImageEngine("bob_viewer", bob_tokens)
    
    print("‚úÖ N≈ìuds Alice (propri√©taire) et Bob (viewer) initialis√©s\n")
    
    # === √âTABLIR AMITI√â ===
    
    alice_token = alice_tokens.establish_asymmetric_friendship(
        "bob_viewer",
        bob_identity["public_key"],
        {"view_phantom_image": True, "download_images": False}
    )
    
    bob_token = bob_tokens.establish_asymmetric_friendship(
        "alice_photographer",
        alice_identity["public_key"],
        {"share_phantom_images": True}
    )
    
    alice_tokens.receive_asymmetric_token(
        "bob_viewer",
        bob_token["token_public_key_pem"],
        bob_token["token_data"]
    )
    
    bob_tokens.receive_asymmetric_token(
        "alice_photographer",
        alice_token["token_public_key_pem"],
        alice_token["token_data"]
    )
    
    print("ü§ù Amiti√© asym√©trique √©tablie entre Alice et Bob\n")
    
    # === SC√âNARIO 1 : CR√âATION ET PARTAGE ===
    
    print("üì∏ === SC√âNARIO 1 : CR√âATION ET PARTAGE ===")
    
    # Alice cr√©e une image (simul√©e)
    # En r√©alit√©, elle fournirait un vrai fichier image
    print("Alice cr√©e une image de paysage...")
    
    # Simuler cr√©ation d'un fichier temporaire
    import tempfile
    with tempfile.NamedTemporaryFile(mode='wb', suffix='.jpg', delete=False) as f:
        f.write(b"FAKE_IMAGE_DATA_LANDSCAPE")  # Image simul√©e
        temp_image_path = f.name
    
    try:
        image_id = alice_phantom.create_phantom_image(
            temp_image_path,
            {"friends_view": True, "public_view": False, "download_allowed": False}
        )
        
        # Alice g√©n√®re une r√©f√©rence fant√¥me pour Bob
        phantom_ref = alice_phantom.get_phantom_reference(image_id, "bob_viewer")
        
        if phantom_ref:
            print("‚úÖ R√©f√©rence fant√¥me g√©n√©r√©e avec succ√®s")
            
            # Bob enregistre l'image fant√¥me
            bob_phantom.register_phantom_image(phantom_ref)
            print("‚úÖ Bob a enregistr√© l'image fant√¥me\n")
        
        # === SC√âNARIO 2 : CONSULTATION AVEC LAZY LOADING ===
        
        print("üëÄ === SC√âNARIO 2 : CONSULTATION (LAZY LOADING) ===")
        
        phantom_id = phantom_ref["phantom_id"]
        print(f"Bob veut voir l'image fant√¥me : {phantom_id}")
        
        # Bob consulte l'image ‚Üí D√©clenche validation lazy
        image_data = await bob_phantom.view_phantom_image(phantom_id)
        
        if image_data:
            print(f"‚úÖ Image affich√©e avec succ√®s ({len(image_data)} bytes)")
        else:
            print("‚ùå Impossible d'afficher l'image")
        
        print()
        
        # === SC√âNARIO 3 : SUPPRESSION AVEC PUSH NOTIFICATIONS ===
        
        print("üóëÔ∏è === SC√âNARIO 3 : SUPPRESSION (PUSH NOTIFICATIONS) ===")
        
        print("Alice d√©cide de supprimer son image...")
        
        # Callback pour Bob quand l'image est supprim√©e
        def on_image_deleted(img_id, sender_node):
            print(f"üì± [BOB NOTIFICATION] Image {img_id} supprim√©e par {sender_node}")
            print("   üì∫ Si Bob regardait l'image ‚Üí Elle devient noire instantan√©ment")
        
        bob_phantom.add_deletion_callback(on_image_deleted)
        
        # Alice supprime l'image
        alice_phantom.delete_owned_image(image_id)
        print()
        
        # === SC√âNARIO 4 : TENTATIVE DE CONSULTATION APR√àS SUPPRESSION ===
        
        print("üîç === SC√âNARIO 4 : CONSULTATION APR√àS SUPPRESSION ===")
        
        print("Bob essaie de revoir l'image supprim√©e...")
        
        # Bob tente de voir l'image ‚Üí Validation √©choue ‚Üí Image noire
        image_data = await bob_phantom.view_phantom_image(phantom_id)
        
        if image_data == alice_phantom._generate_black_image():
            print("‚ö´ Image noire affich√©e (acc√®s refus√©)")
        else:
            print("‚ùå Erreur inattendue")
        
        print()
        
        # === R√âSUM√â ===
        
        print("üìä === R√âSUM√â DU SYST√àME OPTIMIS√â ===")
        print("‚úÖ Lazy Loading : Validation uniquement √† la demande")
        print("‚úÖ Push Notifications : Suppression instantan√©e")
        print("‚úÖ Cache de validation : √âconomise les requ√™tes")
        print("‚úÖ Images noires : Protection anti-capture")
        print("‚úÖ Tokens asym√©triques : S√©curit√© maximale")
        
        alice_owned = alice_phantom.list_owned_images()
        bob_phantoms = bob_phantom.list_phantom_images()
        
        print(f"\nüì∏ Alice poss√®de : {len(alice_owned)} images")
        print(f"üëª Bob a : {len(bob_phantoms)} images fant√¥mes")
        
    finally:
        # Nettoyer le fichier temporaire
        import os
        try:
            os.unlink(temp_image_path)
        except:
            pass
    
    print("\nüéâ === D√âMONSTRATION TERMIN√âE ===")
    print("üöÄ Architecture optimis√©e valid√©e avec succ√®s !")


if __name__ == "__main__":
    asyncio.run(demo_phantom_image_system())