#!/usr/bin/env python3
"""
O-RedSearch P2P Connection Manager
D√©couverte + Connexion s√©curis√©e avec tokens asym√©triques
"""

import socket
import json
import threading
import time
import hashlib
import secrets
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import datetime as dt
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
import base64
import os

# Import du syst√®me de s√©curit√© OpenRed
from core.security import AsymmetricTokenEngine

# Cl√© r√©seau O-RedSearch
ORED_NETWORK_PASSPHRASE = "OpenRed-P2P-Discovery-2025"

@dataclass
class P2PNodeBeacon:
    """N≈ìud avec capacit√©s P2P et s√©curit√© asym√©trique"""
    node_hash: str
    sector: str
    services: List[str]
    activity_level: int
    zone_hash: str
    p2p_endpoint: Dict[str, any]  # IP, port pour connexions directes
    public_key_hash: str          # Hash de la cl√© publique
    capabilities: Dict[str, int] = None

class P2PSecurityManager:
    """Gestionnaire de s√©curit√© P2P avec tokens asym√©triques"""
    
    def __init__(self, node_hash: str):
        self.node_hash = node_hash
        self.token_engine = AsymmetricTokenEngine()
        self.active_connections = {}
        self.pending_handshakes = {}
        
        # G√©n√©rer paire de cl√©s pour ce n≈ìud
        private_key, public_key = self.token_engine.generate_key_pair()
        self.public_key_hash = hashlib.sha256(public_key).hexdigest()[:16]
        
        print(f"üîê P2P Security initialized for {node_hash[:8]} (pubkey: {self.public_key_hash})")
        
    def create_connection_token(self, target_node_hash: str) -> Dict[str, any]:
        """Cr√©e un token pour connexion vers un n≈ìud cible"""
        connection_id = f"p2p_{self.node_hash[:8]}_{target_node_hash[:8]}_{int(time.time())}"
        
        token_data = self.token_engine.create_temporary_token(
            node_id=connection_id,
            lifetime=300  # 5 minutes pour √©tablir connexion
        )
        
        return {
            "connection_id": connection_id,
            "source_node": self.node_hash,
            "target_node": target_node_hash,
            "token_data": token_data,
            "created_at": datetime.now(dt.timezone.utc).isoformat(),
            "purpose": "p2p_connection_request"
        }
        
    def verify_connection_token(self, connection_request: Dict) -> bool:
        """V√©rifie un token de connexion re√ßu"""
        try:
            token_data = connection_request.get("token_data", {})
            token_id = token_data.get("token_id")
            
            if not token_id:
                print("‚ùå No token_id in request")
                return False
            
            # V√©rifier que c'est bien pour nous
            if connection_request.get("target_node") != self.node_hash:
                print(f"‚ùå Token not for this node: {connection_request.get('target_node')[:8]} != {self.node_hash[:8]}")
                return False
            
            # V√©rifier l'expiration depuis le token lui-m√™me
            expires_at = token_data.get("expires_at")
            if expires_at:
                expiry = datetime.fromisoformat(expires_at)
                if datetime.now(dt.timezone.utc) >= expiry:
                    print("‚ùå Token expired")
                    return False
            
            # Pour cette demo, accepter si le token a les bonnes m√©tadonn√©es
            # Dans un vrai syst√®me, on v√©rifierait la signature cryptographique
            source_node = connection_request.get("source_node")
            if source_node and token_data:
                print(f"‚úÖ Token accepted from {source_node[:8]}")
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå Token verification failed: {e}")
            return False
            
    def create_mutual_tokens(self, node_a_hash: str, node_b_hash: str) -> Tuple[Dict, Dict]:
        """Cr√©e une paire de tokens mutuels pour connexion bidirectionnelle"""
        
        # Token A -> B
        token_a = self.create_connection_token(node_b_hash)
        
        # Token B -> A (simul√© pour d√©mo)
        token_b = self.create_connection_token(node_a_hash)
        
        # Lier math√©matiquement les deux tokens
        token_a_id = token_a["token_data"]["token_id"]
        token_b_id = token_b["token_data"]["token_id"]
        
        # Validation crois√©e des tokens
        cross_validation = self.token_engine.validate_cross_token(token_a_id, token_b_id)
        
        return token_a, token_b, cross_validation

class P2PConnectionManager:
    """Gestionnaire de connexions P2P s√©curis√©es"""
    
    def __init__(self, node_info: P2PNodeBeacon, security_manager: P2PSecurityManager):
        self.node_info = node_info
        self.security = security_manager
        self.active_connections = {}
        self.connection_server = None
        self.server_port = node_info.p2p_endpoint.get("port", 9000)
        
    def start_p2p_server(self):
        """D√©marre serveur P2P pour accepter connexions"""
        def server_thread():
            server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server_sock.bind(('0.0.0.0', self.server_port))
            server_sock.listen(5)
            
            print(f"üîó P2P server started on port {self.server_port}")
            
            while True:
                try:
                    client_sock, addr = server_sock.accept()
                    threading.Thread(
                        target=self._handle_p2p_connection,
                        args=(client_sock, addr),
                        daemon=True
                    ).start()
                except Exception as e:
                    print(f"‚ùå P2P server error: {e}")
                    
        threading.Thread(target=server_thread, daemon=True).start()
        
    def _handle_p2p_connection(self, client_sock: socket.socket, addr: Tuple[str, int]):
        """Traite une connexion P2P entrante"""
        try:
            # Recevoir demande de connexion
            data = client_sock.recv(4096)
            connection_request = json.loads(data.decode())
            
            print(f"üîó P2P connection request from {addr[0]}")
            
            # V√©rifier token asym√©trique
            if self.security.verify_connection_token(connection_request):
                # Token valide, accepter connexion
                response = {
                    "status": "accepted",
                    "node_hash": self.node_info.node_hash,
                    "timestamp": time.time(),
                    "public_key_hash": self.node_info.public_key_hash
                }
                
                # Enregistrer connexion active
                source_node = connection_request.get("source_node")
                self.active_connections[source_node] = {
                    "socket": client_sock,
                    "address": addr,
                    "established_at": time.time(),
                    "status": "connected"
                }
                
                print(f"‚úÖ P2P connection accepted from {source_node[:8]}")
                
            else:
                # Token invalide, refuser
                response = {
                    "status": "rejected",
                    "reason": "invalid_token",
                    "timestamp": time.time()
                }
                print(f"‚ùå P2P connection rejected from {addr[0]} (invalid token)")
                
            # Envoyer r√©ponse
            client_sock.send(json.dumps(response).encode())
            
            if response["status"] == "rejected":
                client_sock.close()
                
        except Exception as e:
            print(f"‚ùå P2P connection handling error: {e}")
            client_sock.close()
            
    def connect_to_peer(self, target_node: Dict) -> bool:
        """Initie connexion s√©curis√©e vers un peer d√©couvert"""
        try:
            target_hash = target_node["node_hash"].replace("...", "")  # Remove anonymization
            
            # Extraire le port P2P du n≈ìud cible depuis les balises d√©couvertes
            target_port = 9000  # Port par d√©faut
            
            # Dans un vrai syst√®me, le port serait extrait des m√©tadonn√©es beacon
            # Pour cette d√©mo, on utilise des ports s√©quentiels
            if "health" in target_node.get("sector", ""):
                target_port = 9002
            elif "tech" in target_node.get("sector", ""):
                target_port = 9001
                
            print(f"üîó Attempting P2P connection to {target_hash[:8]} on port {target_port}...")
            
            # Cr√©er token de connexion
            connection_token = self.security.create_connection_token(target_hash)
            
            # √âtablir connexion TCP
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)  # 10s timeout
            
            # Connexion vers le port sp√©cifique du n≈ìud cible
            sock.connect(("127.0.0.1", target_port))
            
            # Envoyer demande avec token
            request_data = json.dumps(connection_token)
            sock.send(request_data.encode())
            
            # Recevoir r√©ponse
            response_data = sock.recv(4096)
            response = json.loads(response_data.decode())
            
            if response.get("status") == "accepted":
                # Connexion accept√©e
                self.active_connections[target_hash] = {
                    "socket": sock,
                    "address": ("127.0.0.1", target_port),
                    "established_at": time.time(),
                    "status": "connected"
                }
                
                print(f"‚úÖ P2P connection established with {target_hash[:8]}")
                return True
                
            else:
                print(f"‚ùå P2P connection rejected: {response.get('reason', 'unknown')}")
                sock.close()
                return False
                
        except Exception as e:
            print(f"‚ùå P2P connection failed: {e}")
            return False
            
    def send_message_to_peer(self, target_hash: str, message: Dict) -> bool:
        """Envoie message s√©curis√© √† un peer connect√©"""
        if target_hash not in self.active_connections:
            print(f"‚ùå No active connection to {target_hash[:8]}")
            return False
            
        try:
            connection = self.active_connections[target_hash]
            sock = connection["socket"]
            
            # Pr√©parer message avec signature
            signed_message = {
                "from": self.node_info.node_hash,
                "to": target_hash,
                "timestamp": time.time(),
                "message": message,
                "signature": hashlib.sha256(json.dumps(message).encode()).hexdigest()
            }
            
            # Envoyer
            sock.send(json.dumps(signed_message).encode())
            print(f"üì§ Message sent to {target_hash[:8]}")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to send message: {e}")
            # Nettoyer connexion cass√©e
            if target_hash in self.active_connections:
                del self.active_connections[target_hash]
            return False
            
    def get_connection_stats(self) -> Dict:
        """Statistiques des connexions P2P"""
        return {
            "active_connections": len(self.active_connections),
            "connections": [
                {
                    "node": node_hash[:8] + "...",
                    "duration": int(time.time() - conn["established_at"]),
                    "status": conn["status"]
                }
                for node_hash, conn in self.active_connections.items()
            ]
        }

# Import du scanner r√©seau pr√©c√©dent
from o_red_search_network import (
    SharedNetworkEncryption, NetworkBeaconBroadcaster, 
    NetworkBeaconScanner, NetworkORedSearch, create_network_zone_hash
)

class P2PNetworkBeaconBroadcaster(NetworkBeaconBroadcaster):
    """Version P2P du broadcaster avec infos de connexion"""
    
    def _create_network_beacon(self) -> Dict:
        """Beacon avec infos P2P"""
        beacon = super()._create_network_beacon()
        
        # Ajouter infos P2P
        beacon["node_data"]["p2p_endpoint"] = self.node_info.p2p_endpoint
        beacon["node_data"]["public_key_hash"] = self.node_info.public_key_hash
        beacon["node_data"]["p2p_capabilities"] = ["direct_connection", "token_auth", "secure_messaging"]
        
        return beacon

# Test complet du syst√®me P2P
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='O-RedSearch P2P - Secure Connections')
    parser.add_argument('--node-id', required=True, help='Node identifier')
    parser.add_argument('--sector', required=True, help='Node sector')
    parser.add_argument('--port', type=int, default=9000, help='P2P port')
    parser.add_argument('--lat', type=float, default=48.8566, help='Latitude')
    parser.add_argument('--lng', type=float, default=2.3522, help='Longitude')
    parser.add_argument('--auto-connect', action='store_true', help='Auto-connect to discovered nodes')
    
    args = parser.parse_args()
    
    # Cr√©er n≈ìud P2P complet
    node_hash = hashlib.sha256(f"{args.node_id}{time.time()}".encode()).hexdigest()
    zone_hash = create_network_zone_hash(args.lat, args.lng)
    
    # Initialiser s√©curit√© P2P
    security_manager = P2PSecurityManager(node_hash)
    
    # Cr√©er n≈ìud avec capacit√©s P2P
    p2p_node = P2PNodeBeacon(
        node_hash=node_hash,
        sector=args.sector,
        services=["storage", "compute", "p2p"],
        activity_level=secrets.randbelow(20) + 80,
        zone_hash=zone_hash,
        p2p_endpoint={"ip": "127.0.0.1", "port": args.port},
        public_key_hash=security_manager.public_key_hash
    )
    
    # D√©marrer tous les syst√®mes
    broadcaster = P2PNetworkBeaconBroadcaster(p2p_node)
    scanner = NetworkBeaconScanner()
    search_engine = NetworkORedSearch(scanner)
    connection_manager = P2PConnectionManager(p2p_node, security_manager)
    
    # Lancer services
    broadcaster.start_broadcasting()
    scanner.start_network_scanning()
    connection_manager.start_p2p_server()
    
    print(f"\nüöÄ O-RedSearch P2P started")
    print(f"   Node: {node_hash[:16]}...")
    print(f"   Sector: {args.sector}")
    print(f"   P2P Port: {args.port}")
    print(f"   Public Key: {security_manager.public_key_hash}")
    print(f"   Auto-connect: {args.auto_connect}")
    
    # Boucle principale avec d√©couverte et connexion
    try:
        discovery_count = 0
        while True:
            time.sleep(15)
            discovery_count += 1
            
            # Chercher autres n≈ìuds
            discovered_nodes = search_engine.network_search()
            
            print(f"\nüìä Discovery cycle {discovery_count}")
            print(f"   Discovered nodes: {len(discovered_nodes)}")
            
            # Afficher n≈ìuds d√©couverts
            for node in discovered_nodes:
                print(f"   - {node['node_hash']}: {node['sector']} | Activity: {node['activity_level']}%")
                
                # Auto-connexion si activ√©e (√©viter l'auto-connexion)
                target_hash = node['node_hash'].replace("...", "")
                if (args.auto_connect and 
                    len(connection_manager.active_connections) < 3 and 
                    target_hash != node_hash):  # ‚ö†Ô∏è √âviter auto-connexion
                    
                    success = connection_manager.connect_to_peer(node)
                    if success:
                        # Envoyer message de test
                        test_message = {
                            "type": "greeting",
                            "content": f"Hello from {args.sector} node!",
                            "timestamp": time.time()
                        }
                        connection_manager.send_message_to_peer(
                            target_hash, 
                            test_message
                        )
            
            # Stats de connexion
            p2p_stats = connection_manager.get_connection_stats()
            search_stats = search_engine.get_network_stats()
            
            print(f"\nüîó P2P Connections: {p2p_stats['active_connections']}")
            for conn in p2p_stats['connections']:
                print(f"   - {conn['node']}: {conn['duration']}s ({conn['status']})")
                
            print(f"üåê Network: {search_stats['legitimate_nodes']} nodes | Success rate: {search_stats['scanner_stats']['decryption_success']}/{search_stats['scanner_stats']['beacons_received']}")
            
    except KeyboardInterrupt:
        print(f"\nüõë Stopping O-RedSearch P2P...")
        broadcaster.stop_broadcasting()
        scanner.stop_network_scanning()
        print(f"‚úÖ P2P system stopped")