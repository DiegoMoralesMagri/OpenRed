#!/usr/bin/env python3
"""
üåê OpenRed cPanel Python App Package Creator
Cr√©e un package compatible avec le gestionnaire d'applications Python de cPanel
Respecte l'architecture OpenRed compl√®te
"""

import os
import sys
import json
import shutil
import zipfile
from pathlib import Path

def create_cpanel_python_package():
    """Cr√©e le package OpenRed pour cPanel Python App"""
    print("üåê Cr√©ation du package OpenRed pour cPanel Python App...")
    print("=" * 60)
    
    base_dir = Path(__file__).parent
    project_root = base_dir.parent
    openred_dir = project_root / "openred-p2p-platform"
    
    # Package pour cPanel
    package_name = "openred-cpanel-python.zip"
    package_path = base_dir / package_name
    
    print(f"üì¶ Cr√©ation de {package_name}...")
    print("üéØ Compatible gestionnaire d'applications Python cPanel")
    
    with zipfile.ZipFile(package_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        
        print("\nüöÄ === CPANEL PYTHON APP STRUCTURE ===")
        
        # 1. app.py - Point d'entr√©e cPanel
        app_py_content = '''#!/usr/bin/env python3
"""
OpenRed cPanel Python Application
Point d'entr√©e pour le gestionnaire d'applications Python cPanel
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire courant au path
app_dir = Path(__file__).parent
sys.path.insert(0, str(app_dir))

# Import du syst√®me OpenRed
try:
    from web.backend.web_api import app
    
    # Configuration pour cPanel
    if __name__ == "__main__":
        import uvicorn
        uvicorn.run(
            app, 
            host="0.0.0.0", 
            port=int(os.environ.get("PORT", 8000)),
            log_level="info"
        )
    
    # Export pour WSGI/ASGI
    application = app
    
except ImportError as e:
    print(f"Erreur import OpenRed: {e}")
    
    # Fallback simple pour cPanel
    from flask import Flask, jsonify, render_template_string
    
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>OpenRed Platform</title>
            <style>
                body { font-family: Arial, sans-serif; background: #1a1a2e; color: white; text-align: center; padding: 50px; }
                .container { max-width: 600px; margin: 0 auto; }
                .logo { font-size: 3em; margin-bottom: 20px; }
                .status { background: #16213e; padding: 20px; border-radius: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="logo">üåê OpenRed</div>
                <div class="status">
                    <h2>Plateforme en cours de d√©marrage...</h2>
                    <p>Le syst√®me OpenRed authentique est en cours d'initialisation.</p>
                    <p><strong>Status:</strong> D√©ploiement cPanel r√©ussi</p>
                </div>
            </div>
        </body>
        </html>
        """)
    
    @app.route('/api/status')
    def api_status():
        return jsonify({
            'status': 'online',
            'platform': 'OpenRed cPanel',
            'mode': 'fallback'
        })
    
    application = app
'''
        
        zipf.writestr("app.py", app_py_content)
        print("  ‚úÖ app.py (Point d'entr√©e cPanel)")
        
        # 2. requirements.txt pour cPanel
        requirements_content = '''fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6
jinja2==3.1.2
websockets==11.0.3
pillow==10.0.1
cryptography==41.0.7
aiofiles==23.2.1
pydantic==2.4.2
flask==2.3.3
'''
        
        zipf.writestr("requirements.txt", requirements_content)
        print("  ‚úÖ requirements.txt (d√©pendances cPanel)")
        
        # 3. passenger_wsgi.py pour Passenger (cPanel standard)
        passenger_wsgi_content = '''import sys
import os
from pathlib import Path

# Configuration Passenger
app_dir = Path(__file__).parent
sys.path.insert(0, str(app_dir))

try:
    from app import application
except ImportError:
    # Fallback WSGI simple
    def application(environ, start_response):
        status = '200 OK'
        headers = [('Content-type', 'text/html')]
        start_response(status, headers)
        
        return [b"""
        <!DOCTYPE html>
        <html>
        <head><title>OpenRed Platform</title></head>
        <body style="font-family: Arial; text-align: center; background: #1a1a2e; color: white; padding: 50px;">
            <h1>üåê OpenRed Platform</h1>
            <p>D√©ploiement cPanel r√©ussi - Syst√®me en cours d'initialisation</p>
        </body>
        </html>
        """]
'''
        
        zipf.writestr("passenger_wsgi.py", passenger_wsgi_content)
        print("  ‚úÖ passenger_wsgi.py (WSGI Passenger)")
        
        # 4. Copier le syst√®me OpenRed COMPLET
        print("\nüîê === SYST√àME OPENRED COMPLET ===")
        
        # Core OpenRed
        core_files = [
            "openred_p2p_node.py",
            "friendship_protocol.py", 
            "social_messaging.py",
            "conditional_urn_sharing.py",
            "phantom_image_urn_system.py",
            "image_urn_system.py"
        ]
        
        for file in core_files:
            file_path = openred_dir / file
            if file_path.exists():
                zipf.write(file_path, file)
                print(f"  ‚úÖ {file}")
        
        # Web backend complet
        backend_dir = openred_dir / "web" / "backend"
        if backend_dir.exists():
            for py_file in backend_dir.glob("*.py"):
                rel_path = f"web/backend/{py_file.name}"
                zipf.write(py_file, rel_path)
                print(f"  ‚úÖ {rel_path}")
        
        # Web frontend complet
        frontend_dir = openred_dir / "web" / "frontend"
        if frontend_dir.exists():
            for html_file in frontend_dir.glob("*.html"):
                rel_path = f"web/frontend/{html_file.name}"
                zipf.write(html_file, rel_path)
                print(f"  ‚úÖ {rel_path}")
        
        # Core protocols
        core_dir = openred_dir / "core"
        if core_dir.exists():
            for py_file in core_dir.rglob("*.py"):
                rel_path = f"core/{py_file.relative_to(core_dir)}"
                zipf.write(py_file, rel_path)
                print(f"  ‚úÖ {rel_path}")
        
        # 5. Configuration cPanel
        print("\n‚öôÔ∏è  === CONFIGURATION CPANEL ===")
        
        # .htaccess pour redirection
        htaccess_content = '''# OpenRed cPanel Python App Configuration

# Redirection vers app Python
RewriteEngine On

# Servir les fichiers statiques directement
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^(.*)$ - [L]

# Rediriger vers l'app Python pour tout le reste
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /app.py/$1 [QSA,L]

# Configuration MIME
AddType application/json .json
AddType text/html .html

# Headers s√©curit√©
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options SAMEORIGIN
</IfModule>
'''
        
        zipf.writestr(".htaccess", htaccess_content)
        print("  ‚úÖ .htaccess (redirection)")
        
        # Guide d'installation cPanel
        install_guide = '''# üåê OpenRed - Installation cPanel Python App

## üìã Pr√©requis
- H√©bergement avec cPanel
- Support Python 3.8+ 
- Gestionnaire d'applications Python activ√©

## üöÄ Installation √âtape par √âtape

### 1. Acc√©der au gestionnaire Python
- Connectez-vous √† cPanel
- Recherchez "Python App" ou "Setup Python App"
- Cliquez sur "Create Application"

### 2. Configuration de l'application
- **Python version:** 3.8 ou sup√©rieur
- **Application root:** `/public_html/openred` (ou sous-domaine)
- **Application URL:** votre-domaine.com/openred
- **Application startup file:** `app.py`
- **Application Entry point:** `application`

### 3. D√©ploiement des fichiers
- D√©compressez `openred-cpanel-python.zip`
- Uploadez TOUS les fichiers dans le r√©pertoire de l'application
- Assurez-vous que `app.py` est √† la racine

### 4. Installation des d√©pendances
Dans le terminal cPanel ou interface Python :
```bash
pip install -r requirements.txt
```

### 5. D√©marrage de l'application
- Cliquez sur "START APP" dans le gestionnaire Python
- L'application sera accessible √† l'URL configur√©e

## üîó Acc√®s √† OpenRed

- **Interface principale:** `http://votre-domaine.com/openred/`
- **Page de connexion:** `http://votre-domaine.com/openred/web/frontend/login.html`
- **API Status:** `http://votre-domaine.com/openred/api/status`

## üéØ Fonctionnalit√©s Disponibles

‚úÖ **Syst√®me d'authentification** complet
‚úÖ **Profils utilisateurs** avec gestion de confidentialit√©  
‚úÖ **Protocoles P2P** friendship authentiques
‚úÖ **Interface sociale** compl√®te (dashboard, amis)
‚úÖ **APIs REST** fonctionnelles
‚úÖ **Syst√®me de messaging** distribu√©

## ‚ö†Ô∏è Notes Importantes

- **Red√©marrage:** Utilisez le gestionnaire Python cPanel
- **Logs:** Consultables via l'interface cPanel
- **Mise √† jour:** Remplacez les fichiers et red√©marrez
- **Permissions:** G√©r√©es automatiquement par cPanel

## üÜò Support

- Documentation: https://github.com/DiegoMoralesMagri/OpenRed
- Issues: https://github.com/DiegoMoralesMagri/OpenRed/issues

**Ceci est le VRAI syst√®me OpenRed en production !**
'''
        
        zipf.writestr("INSTALL_CPANEL.md", install_guide)
        print("  ‚úÖ INSTALL_CPANEL.md (guide)")

    # Statistiques
    file_size = os.path.getsize(package_path)
    print(f"\n" + "=" * 60)
    print(f"‚úÖ Package OpenRed cPanel cr√©√©!")
    print(f"üìè Taille: {file_size / 1024:.1f} KB")
    print(f"üéØ Fichier: {package_name}")
    print(f"üåê Compatible gestionnaire Python cPanel")
    print(f"üîê Syst√®me OpenRed COMPLET inclus")
    
    return package_path

if __name__ == "__main__":
    package = create_cpanel_python_package()
    if package:
        print(f"\nüéâ PACKAGE CPANEL PR√äT !")
        print(f"üìÅ {package}")
        print(f"üöÄ D√©ployez sur cPanel Python App !")
        print(f"üìñ Suivez le guide INSTALL_CPANEL.md")
    else:
        print("‚ùå Erreur lors de la cr√©ation du package")
        sys.exit(1)