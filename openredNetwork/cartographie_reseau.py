#!/usr/bin/env python3
"""
üó∫Ô∏è OpenRed Network - Syst√®me de Cartographie et D√©couverte
Cartographie r√©seau + Reconnaissance forts + Routes de communication
"""

import socket
import json
import time
import threading
import uuid
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Tuple
from dataclasses import dataclass, asdict
import math


@dataclass
class PositionFort:
    """Position logique d'un fort sur la carte r√©seau"""
    x: float
    y: float
    zone: str = "principale"


@dataclass
class FortSurCarte:
    """Repr√©sentation d'un fort sur la carte r√©seau"""
    id_fort: str
    nom: str
    adresse_orp: str
    position: PositionFort
    addr_reseau: Tuple[str, int]
    derniere_activite: float
    statut: str = "en_ligne"  # en_ligne, hors_ligne, suspect
    routes_directes: List[str] = None
    
    def __post_init__(self):
        if self.routes_directes is None:
            self.routes_directes = []


class CarteReseau:
    """
    üó∫Ô∏è Carte compl√®te du r√©seau OpenRed
    Maintient la topologie et les routes entre forts
    """
    
    def __init__(self):
        self.forts: Dict[str, FortSurCarte] = {}
        self.routes: Dict[str, Dict[str, float]] = {}  # id_fort -> {destination: distance}
        self.zones = {
            "principale": {"x_min": 0, "x_max": 1000, "y_min": 0, "y_max": 1000}
        }
        self.derniere_mise_a_jour = time.time()
        self.mutex = threading.Lock()
    
    def ajouter_fort(self, fort: FortSurCarte) -> bool:
        """Ajoute un fort √† la carte"""
        with self.mutex:
            if fort.id_fort not in self.forts:
                self.forts[fort.id_fort] = fort
                self._calculer_position_logique(fort)
                self._mettre_a_jour_routes(fort.id_fort)
                self.derniere_mise_a_jour = time.time()
                print(f"üó∫Ô∏è Fort {fort.nom} ajout√© √† la carte ({fort.position.x:.0f},{fort.position.y:.0f})")
                return True
            else:
                # Mise √† jour fort existant
                self.forts[fort.id_fort].derniere_activite = fort.derniere_activite
                self.forts[fort.id_fort].statut = fort.statut
                return False
    
    def _calculer_position_logique(self, fort: FortSurCarte):
        """Calcule une position logique bas√©e sur l'ID du fort"""
        # Hash de l'ID pour position d√©terministe mais distribu√©e
        hash_obj = hashlib.md5(fort.id_fort.encode())
        hash_int = int(hash_obj.hexdigest(), 16)
        
        zone = self.zones["principale"]
        x = (hash_int % 1000000) / 1000000 * (zone["x_max"] - zone["x_min"]) + zone["x_min"]
        y = ((hash_int // 1000000) % 1000000) / 1000000 * (zone["y_max"] - zone["y_min"]) + zone["y_min"]
        
        fort.position = PositionFort(x, y, "principale")
    
    def _mettre_a_jour_routes(self, id_fort: str):
        """Met √† jour les routes depuis/vers ce fort"""
        if id_fort not in self.routes:
            self.routes[id_fort] = {}
        
        fort_source = self.forts[id_fort]
        
        # Calculer distances vers tous les autres forts
        for autre_id, autre_fort in self.forts.items():
            if autre_id != id_fort:
                distance = self._calculer_distance(fort_source.position, autre_fort.position)
                self.routes[id_fort][autre_id] = distance
                
                # Route bidirectionnelle
                if autre_id not in self.routes:
                    self.routes[autre_id] = {}
                self.routes[autre_id][id_fort] = distance
    
    def _calculer_distance(self, pos1: PositionFort, pos2: PositionFort) -> float:
        """Calcule la distance logique entre deux positions"""
        return math.sqrt((pos1.x - pos2.x)**2 + (pos1.y - pos2.y)**2)
    
    def obtenir_forts_proches(self, id_fort: str, rayon: float = 200) -> List[str]:
        """Retourne les forts dans un rayon donn√©"""
        if id_fort not in self.forts:
            return []
        
        forts_proches = []
        fort_centre = self.forts[id_fort]
        
        for autre_id, autre_fort in self.forts.items():
            if autre_id != id_fort:
                distance = self._calculer_distance(fort_centre.position, autre_fort.position)
                if distance <= rayon and autre_fort.statut == "en_ligne":
                    forts_proches.append(autre_id)
        
        return forts_proches
    
    def trouver_route_optimale(self, source: str, destination: str) -> Optional[List[str]]:
        """Trouve la route optimale entre deux forts (Dijkstra simplifi√©)"""
        if source not in self.forts or destination not in self.forts:
            return None
        
        if source == destination:
            return [source]
        
        # Pour simplicit√©, route directe si distance acceptable
        if source in self.routes and destination in self.routes[source]:
            distance = self.routes[source][destination]
            if distance < 500:  # Distance directe acceptable
                return [source, destination]
        
        # Sinon, chercher via un relais (algorithme simple)
        meilleure_route = None
        meilleure_distance = float('inf')
        
        for relais_id in self.forts.keys():
            if relais_id != source and relais_id != destination:
                if (source in self.routes and relais_id in self.routes[source] and
                    relais_id in self.routes and destination in self.routes[relais_id]):
                    
                    distance_totale = self.routes[source][relais_id] + self.routes[relais_id][destination]
                    if distance_totale < meilleure_distance:
                        meilleure_distance = distance_totale
                        meilleure_route = [source, relais_id, destination]
        
        return meilleure_route
    
    def nettoyer_forts_inactifs(self, timeout: float = 30.0):
        """Supprime les forts inactifs de la carte"""
        maintenant = time.time()
        forts_a_supprimer = []
        
        with self.mutex:
            for id_fort, fort in self.forts.items():
                if maintenant - fort.derniere_activite > timeout:
                    forts_a_supprimer.append(id_fort)
            
            for id_fort in forts_a_supprimer:
                del self.forts[id_fort]
                if id_fort in self.routes:
                    del self.routes[id_fort]
                # Nettoyer r√©f√©rences dans autres routes
                for routes_fort in self.routes.values():
                    if id_fort in routes_fort:
                        del routes_fort[id_fort]
                
                print(f"üó∫Ô∏è Fort {id_fort} supprim√© de la carte (inactif)")
    
    def exporter_carte(self) -> Dict:
        """Exporte l'√©tat actuel de la carte"""
        with self.mutex:
            return {
                "timestamp": self.derniere_mise_a_jour,
                "nombre_forts": len(self.forts),
                "forts": {id_fort: asdict(fort) for id_fort, fort in self.forts.items()},
                "routes": self.routes.copy(),
                "zones": self.zones.copy()
            }


class RadarFort:
    """
    üì° Syst√®me radar pour scanner et cartographier le r√©seau
    Chaque fort utilise son radar pour d√©couvrir les autres
    """
    
    def __init__(self, id_fort: str, socket_reseau: socket.socket):
        self.id_fort = id_fort
        self.socket = socket_reseau
        self.carte_locale = CarteReseau()
        self.derniere_exploration = 0
        self.portee_radar = 300  # Port√©e du radar
        self.actif = True
        
        # Statistiques radar
        self.stats = {
            "scans_effectues": 0,
            "forts_decouverts": 0,
            "signaux_emis": 0,
            "reponses_recues": 0
        }
    
    def emettre_impulsion_radar(self, cibles: List[Tuple[str, int]] = None):
        """
        üì° √âmet une impulsion radar pour scanner le r√©seau
        Principe: Signal qui r√©v√®le les forts ET cartographie en m√™me temps
        """
        impulsion = {
            "type": "impulsion_radar",
            "fort_emetteur": self.id_fort,
            "timestamp": time.time(),
            "portee": self.portee_radar,
            "demande_reponse": True,
            "carte_partielle": self._generer_carte_partielle()
        }
        
        # Cibles par d√©faut (broadcast local)
        if cibles is None:
            cibles = [('127.0.0.1', port) for port in range(9000, 9020)]
        
        for addr in cibles:
            try:
                data = json.dumps(impulsion).encode('utf-8')
                self.socket.sendto(data, addr)
                self.stats["signaux_emis"] += 1
            except:
                pass
        
        self.stats["scans_effectues"] += 1
        self.derniere_exploration = time.time()
        print(f"üì° Impulsion radar √©mise par {self.id_fort} (port√©e: {self.portee_radar})")
    
    def _generer_carte_partielle(self) -> Dict:
        """G√©n√®re une carte partielle √† partager"""
        carte_complete = self.carte_locale.exporter_carte()
        
        # Partager seulement les forts proches
        forts_proches = self.carte_locale.obtenir_forts_proches(self.id_fort, self.portee_radar)
        
        carte_partielle = {
            "forts_visibles": len(forts_proches),
            "zone_couverte": f"rayon_{self.portee_radar}",
            "derniere_maj": carte_complete["timestamp"]
        }
        
        return carte_partielle
    
    def traiter_impulsion_radar(self, impulsion: Dict, addr_source: tuple) -> bool:
        """
        Traite une impulsion radar re√ßue et r√©pond avec ses informations
        """
        fort_emetteur = impulsion.get("fort_emetteur")
        
        if fort_emetteur == self.id_fort:
            return False  # Ignore sa propre impulsion
        
        # Cr√©er r√©ponse avec informations du fort
        reponse = {
            "type": "reponse_radar",
            "fort_repondeur": self.id_fort,
            "fort_destinataire": fort_emetteur,
            "timestamp": time.time(),
            "position_estimee": self._estimer_position(),
            "forts_visibles": len(self.carte_locale.forts),
            "statut": "en_ligne"
        }
        
        # Envoyer r√©ponse
        try:
            data = json.dumps(reponse).encode('utf-8')
            self.socket.sendto(data, addr_source)
            print(f"üì° R√©ponse radar envoy√©e √† {fort_emetteur}")
            return True
        except:
            return False
    
    def traiter_reponse_radar(self, reponse: Dict, addr_source: tuple):
        """Traite une r√©ponse radar et met √† jour la carte"""
        fort_repondeur = reponse.get("fort_repondeur")
        
        if fort_repondeur != self.id_fort:  # Pas sa propre r√©ponse
            # Cr√©er entr√©e fort pour la carte
            nouveau_fort = FortSurCarte(
                id_fort=fort_repondeur,
                nom=f"Fort_{fort_repondeur[:8]}",
                adresse_orp=f"orp://{fort_repondeur[:8]}.openred.network",
                position=PositionFort(0, 0),  # Sera calcul√©e automatiquement
                addr_reseau=addr_source,
                derniere_activite=time.time(),
                statut="en_ligne"
            )
            
            est_nouveau = self.carte_locale.ajouter_fort(nouveau_fort)
            if est_nouveau:
                self.stats["forts_decouverts"] += 1
                print(f"üó∫Ô∏è Nouveau fort d√©couvert: {fort_repondeur}")
            
            self.stats["reponses_recues"] += 1
    
    def _estimer_position(self) -> Dict:
        """Estime la position du fort (simplifi√©)"""
        if self.id_fort in self.carte_locale.forts:
            pos = self.carte_locale.forts[self.id_fort].position
            return {"x": pos.x, "y": pos.y, "zone": pos.zone}
        return {"x": 0, "y": 0, "zone": "inconnue"}
    
    def exploration_continue(self, intervalle: float = 5.0):
        """Lance une exploration continue du r√©seau"""
        while self.actif:
            self.emettre_impulsion_radar()
            self.carte_locale.nettoyer_forts_inactifs()
            time.sleep(intervalle)
    
    def obtenir_statistiques_radar(self) -> Dict:
        """Retourne les statistiques du radar"""
        return {
            "fort": self.id_fort,
            "stats_radar": self.stats.copy(),
            "carte_locale": {
                "forts_connus": len(self.carte_locale.forts),
                "routes_calculees": len(self.carte_locale.routes),
                "derniere_maj": self.carte_locale.derniere_mise_a_jour
            }
        }


class FortAvecRadar:
    """
    üè∞ Fort √©quip√© d'un syst√®me radar pour cartographie r√©seau
    Combine fort basique + radar + cartographie
    """
    
    def __init__(self, nom: str, port: int = 0):
        self.nom = nom
        self.id_fort = f"{nom}_{uuid.uuid4().hex[:8]}"
        
        # Socket r√©seau
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', port))
        self.port = self.socket.getsockname()[1]
        self.socket.settimeout(0.5)
        
        # Syst√®me radar
        self.radar = RadarFort(self.id_fort, self.socket)
        
        # √âtat
        self.actif = True
        self.stats = {"messages_traites": 0, "erreurs": 0}
        
        # Ajouter ce fort √† sa propre carte
        fort_local = FortSurCarte(
            id_fort=self.id_fort,
            nom=self.nom,
            adresse_orp=f"orp://{nom.lower()}.openred.network",
            position=PositionFort(0, 0),
            addr_reseau=('127.0.0.1', self.port),
            derniere_activite=time.time(),
            statut="en_ligne"
        )
        self.radar.carte_locale.ajouter_fort(fort_local)
        
        print(f"üè∞ Fort {nom} avec radar cr√©√© sur port {self.port}")
    
    def ecouter_reseau(self):
        """√âcoute r√©seau avec traitement des messages radar"""
        while self.actif:
            try:
                data, addr = self.socket.recvfrom(2048)
                message = json.loads(data.decode('utf-8'))
                self.stats["messages_traites"] += 1
                
                type_msg = message.get("type")
                
                if type_msg == "impulsion_radar":
                    self.radar.traiter_impulsion_radar(message, addr)
                elif type_msg == "reponse_radar":
                    self.radar.traiter_reponse_radar(message, addr)
                elif type_msg == "demande_carte":
                    self._envoyer_carte(addr)
                
            except socket.timeout:
                continue
            except Exception as e:
                self.stats["erreurs"] += 1
                continue
    
    def _envoyer_carte(self, addr: tuple):
        """Envoie l'√©tat de la carte locale"""
        carte = self.radar.carte_locale.exporter_carte()
        message = {
            "type": "carte_reseau",
            "fort_source": self.id_fort,
            "carte": carte,
            "timestamp": time.time()
        }
        
        try:
            data = json.dumps(message).encode('utf-8')
            self.socket.sendto(data, addr)
        except:
            pass
    
    def demarrer_exploration(self):
        """D√©marre l'exploration radar en arri√®re-plan"""
        thread_ecoute = threading.Thread(target=self.ecouter_reseau, daemon=True)
        thread_radar = threading.Thread(target=self.radar.exploration_continue, daemon=True)
        
        thread_ecoute.start()
        thread_radar.start()
        
        return thread_ecoute, thread_radar
    
    def obtenir_vue_reseau(self) -> Dict:
        """Obtient une vue compl√®te du r√©seau connu"""
        return {
            "fort": {
                "id": self.id_fort,
                "nom": self.nom,
                "port": self.port,
                "stats": self.stats
            },
            "radar": self.radar.obtenir_statistiques_radar(),
            "carte": self.radar.carte_locale.exporter_carte()
        }
    
    def trouver_route_vers(self, id_fort_cible: str) -> Optional[List[str]]:
        """Trouve une route vers un fort cible"""
        return self.radar.carte_locale.trouver_route_optimale(self.id_fort, id_fort_cible)
    
    def arreter(self):
        """Arr√™te le fort et son radar"""
        self.actif = False
        self.radar.actif = False
        self.socket.close()


def demo_cartographie_reseau():
    """
    üé≠ D√©monstration du syst√®me de cartographie r√©seau
    """
    print("=" * 60)
    print("üó∫Ô∏è D√âMONSTRATION CARTOGRAPHIE R√âSEAU OPENRED")
    print("=" * 60)
    
    # Cr√©ation des forts avec radar
    print("\n1Ô∏è‚É£ Cr√©ation des forts avec radar...")
    forts = [
        FortAvecRadar("Alpha", 9001),
        FortAvecRadar("Beta", 9002), 
        FortAvecRadar("Gamma", 9003),
        FortAvecRadar("Delta", 9004)
    ]
    
    # D√©marrage exploration
    print("\n2Ô∏è‚É£ D√©marrage exploration radar...")
    threads = []
    for fort in forts:
        t_ecoute, t_radar = fort.demarrer_exploration()
        threads.extend([t_ecoute, t_radar])
    
    # Laisser le temps pour la d√©couverte
    print("\n3Ô∏è‚É£ Exploration en cours...")
    for i in range(15):
        time.sleep(1)
        print(f"   Scan {i+1}/15...", end='\r')
    print("\n   ‚úÖ Exploration termin√©e")
    
    # Analyse des r√©sultats
    print("\n4Ô∏è‚É£ Analyse de la cartographie...")
    
    for fort in forts:
        vue = fort.obtenir_vue_reseau()
        
        print(f"\nüìä Fort {vue['fort']['nom']} ({vue['fort']['id']}):")
        print(f"   Messages trait√©s: {vue['fort']['stats']['messages_traites']}")
        print(f"   Radar - Scans: {vue['radar']['stats_radar']['scans_effectues']}")
        print(f"   Radar - D√©couvertes: {vue['radar']['stats_radar']['forts_decouverts']}")
        print(f"   Carte - Forts connus: {vue['radar']['carte_locale']['forts_connus']}")
        
        # Test de routage
        autres_forts = [f.id_fort for f in forts if f.id_fort != fort.id_fort]
        if autres_forts:
            cible = autres_forts[0]
            route = fort.trouver_route_vers(cible)
            if route:
                print(f"   Route vers {cible[:8]}: {' -> '.join([r[:8] for r in route])}")
            else:
                print(f"   Route vers {cible[:8]}: Non trouv√©e")
    
    # √âvaluation de la cartographie
    print(f"\nüèÜ √âVALUATION CARTOGRAPHIE:")
    
    total_decouvertes = sum(fort.radar.stats["forts_decouverts"] for fort in forts)
    total_forts = len(forts)
    taux_decouverte = total_decouvertes / (total_forts * (total_forts - 1)) * 100 if total_forts > 1 else 0
    
    communication_ok = all(fort.radar.stats["reponses_recues"] > 0 for fort in forts)
    cartographie_ok = all(len(fort.radar.carte_locale.forts) > 1 for fort in forts)
    routes_ok = any(fort.trouver_route_vers(autre.id_fort) for fort in forts for autre in forts if fort != autre)
    
    print(f"   Taux de d√©couverte: {taux_decouverte:.1f}%")
    print(f"   Communication radar: {'‚úÖ' if communication_ok else '‚ùå'}")
    print(f"   Cartographie active: {'‚úÖ' if cartographie_ok else '‚ùå'}")
    print(f"   Routes calcul√©es: {'‚úÖ' if routes_ok else '‚ùå'}")
    
    cartographie_reussie = communication_ok and cartographie_ok and taux_decouverte > 50
    
    print(f"\nüéØ VERDICT CARTOGRAPHIE: {'üü¢ R√âUSSIE' if cartographie_reussie else 'üü° PARTIELLE'}")
    
    if cartographie_reussie:
        print("   ‚úÖ Syst√®me de cartographie fonctionnel !")
        print("   üó∫Ô∏è Forts se d√©couvrent et calculent routes")
        print("   üì° Radar efficace pour exploration r√©seau")
        print("   üöÄ Pr√™t pour int√©gration avec fen√™tres")
    
    # Nettoyage
    print(f"\n5Ô∏è‚É£ Arr√™t des forts...")
    for fort in forts:
        fort.arreter()
    
    return cartographie_reussie


if __name__ == "__main__":
    resultat = demo_cartographie_reseau()
    if resultat:
        print(f"\nüöÄ Syst√®me de cartographie valid√© ! Int√©gration avec fen√™tres possible !")
    else:
        print(f"\n‚ö†Ô∏è Optimisations de cartographie n√©cessaires")