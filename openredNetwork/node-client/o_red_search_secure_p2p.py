# === O-RedSearch P2P R√©volutionnaire : Syst√®me Final ===
# Architecture r√©volutionnaire - Abandon de l'API centrale

import socket
import json
import threading
import time
import hashlib
import secrets
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import datetime as dt
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.backends import default_backend
import base64
import os

# Import de votre architecture de s√©curit√© r√©volutionnaire
from simple_p2p_security import SimpleP2PSecurityProtocol

@dataclass
class SecureP2PNodeBeacon:
    """Beacon avec fingerprint cryptographique pour s√©curit√©"""
    node_fingerprint: str  # Fingerprint unique bas√© sur cl√© publique
    node_hash: str         # Hash complet pour compatibilit√©
    sector: str
    services: List[str]
    activity_level: int
    zone_hash: str
    p2p_endpoint: Dict[str, any]
    timestamp: float
    
class SecureP2PConnectionManager:
    """Gestionnaire de connexions P2P avec votre architecture de s√©curit√© r√©volutionnaire"""
    
    def __init__(self, node_beacon: SecureP2PNodeBeacon, security_protocol: SimpleP2PSecurityProtocol):
        self.node_info = node_beacon
        self.active_connections = {}
        self.p2p_server_socket = None
        
        # Utiliser le protocole de s√©curit√© fourni (m√™me fingerprint coh√©rent)
        self.security_protocol = security_protocol
        
        print(f"üîê Revolutionary P2P Security initialized")
        print(f"   Fingerprint: {self.security_protocol.public_key_fingerprint}")
        print(f"   üö´ NO CENTRAL API - Pure P2P Architecture")
        
    def start_p2p_server(self):
        """D√©marre serveur P2P avec votre architecture de s√©curit√©"""
        def server_thread():
            try:
                self.p2p_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.p2p_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                
                port = self.node_info.p2p_endpoint["port"]
                self.p2p_server_socket.bind(("0.0.0.0", port))
                self.p2p_server_socket.listen(5)
                
                print(f"üîó Revolutionary P2P server started on port {port}")
                
                while True:
                    client_sock, addr = self.p2p_server_socket.accept()
                    threading.Thread(
                        target=self._handle_secure_p2p_connection,
                        args=(client_sock, addr),
                        daemon=True
                    ).start()
                    
            except Exception as e:
                if "forced" not in str(e).lower():
                    print(f"‚ùå P2P server error: {e}")
                    
        threading.Thread(target=server_thread, daemon=True).start()
        
    def _handle_secure_p2p_connection(self, client_sock: socket.socket, addr: Tuple[str, int]):
        """Traite connexion P2P avec votre protocole de s√©curit√© r√©volutionnaire"""
        try:
            # Recevoir handshake de connexion
            data = client_sock.recv(4096)
            handshake_request = json.loads(data.decode())
            
            print(f"üîó Revolutionary P2P handshake from {addr[0]}")
            print(f"   Source: {handshake_request.get('source_fingerprint', 'unknown')[:8]}...")
            print(f"   Target: {handshake_request.get('target_fingerprint', 'unknown')[:8]}...")
            print(f"   Our fingerprint: {self.security_protocol.public_key_fingerprint[:8]}...")
            
            # V√©rifier handshake avec votre protocole r√©volutionnaire
            valid, response = self.security_protocol.verify_and_respond_handshake(handshake_request)
            
            if valid:
                # Handshake valide, accepter connexion
                print(f"‚úÖ Revolutionary handshake verified - connection accepted")
                
                # Enregistrer connexion active
                source_fingerprint = handshake_request.get("source_fingerprint")
                self.active_connections[source_fingerprint] = {
                    "socket": client_sock,
                    "address": addr,
                    "established_at": time.time(),
                    "status": "connected",
                    "mutual_link": response.get("mutual_link")
                }
                
            else:
                # Handshake invalide, refuser
                print(f"‚ùå Revolutionary handshake verification failed: {response.get('error', 'unknown')}")
                
            # Envoyer r√©ponse
            client_sock.send(json.dumps(response).encode())
            
            if not valid:
                client_sock.close()
                
        except Exception as e:
            print(f"‚ùå Revolutionary P2P connection handling error: {e}")
            client_sock.close()
            
    def connect_to_secure_peer(self, target_node: Dict) -> bool:
        """Connexion s√©curis√©e avec votre protocole r√©volutionnaire"""
        try:
            # Extraire fingerprint du n≈ìud cible
            target_fingerprint = target_node.get("node_fingerprint")
            if not target_fingerprint:
                print(f"‚ùå No fingerprint for target node")
                return False
            
            # √âviter auto-connexion
            if target_fingerprint == self.security_protocol.public_key_fingerprint:
                print(f"üîÑ Skipping self-connection")
                return True
            
            # √âviter connexions multiples
            if target_fingerprint in self.active_connections:
                print(f"üîÑ Already connected to {target_fingerprint[:8]}...")
                return True
            
            # D√©terminer port P2P
            target_port = 9000
            if "health" in target_node.get("sector", ""):
                target_port = 9002
            elif "tech" in target_node.get("sector", ""):
                target_port = 9001
                
            print(f"üîó Attempting revolutionary connection to {target_fingerprint[:8]}...")
            print(f"üîó Direct P2P connection (NO CENTRAL API) on port {target_port}")
            print(f"   Our fingerprint: {self.security_protocol.public_key_fingerprint[:8]}...")
            
            # Cr√©er handshake avec votre protocole r√©volutionnaire
            handshake = self.security_protocol.create_connection_handshake(target_fingerprint)
            print(f"   Revolutionary handshake created for target: {handshake.get('target_fingerprint', 'unknown')[:8]}...")
            
            # √âtablir connexion TCP directe
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            sock.connect(("127.0.0.1", target_port))
            
            # Envoyer handshake r√©volutionnaire
            sock.send(json.dumps(handshake).encode())
            
            # Recevoir r√©ponse
            response_data = sock.recv(4096)
            response = json.loads(response_data.decode())
            
            print(f"   Response status: {response.get('status', 'unknown')}")
            
            # Finaliser connexion avec votre protocole r√©volutionnaire
            connected, connection_token = self.security_protocol.finalize_connection(response, handshake)
            
            if connected:
                # Connexion r√©volutionnaire √©tablie avec succ√®s !
                self.active_connections[target_fingerprint] = {
                    "socket": sock,
                    "address": ("127.0.0.1", target_port),
                    "established_at": time.time(),
                    "status": "connected",
                    "connection_token": connection_token
                }
                
                print(f"‚úÖ Revolutionary P2P connection established with {target_fingerprint[:8]}...")
                print(f"   Connection ID: {connection_token['connection_id']}")
                print(f"   Mutual Link: {connection_token['mutual_link'][:16]}...")
                print(f"   üö´ NO CENTRAL API INVOLVED - Pure P2P Revolution!")
                return True
                
            else:
                print(f"‚ùå Revolutionary connection finalization failed: {connection_token.get('error', 'unknown')}")
                sock.close()
                return False
                
        except Exception as e:
            print(f"‚ùå Revolutionary P2P connection failed: {e}")
            return False
    
    def send_secure_message(self, target_fingerprint: str, message: Dict) -> bool:
        """Envoie message s√©curis√© via connexion P2P r√©volutionnaire"""
        if target_fingerprint not in self.active_connections:
            print(f"‚ùå No active revolutionary connection to {target_fingerprint[:8]}...")
            return False
            
        try:
            connection = self.active_connections[target_fingerprint]
            sock = connection["socket"]
            
            # Ajouter m√©tadonn√©es de s√©curit√© r√©volutionnaire
            secure_message = {
                "type": "revolutionary_p2p_message",
                "source_fingerprint": self.security_protocol.public_key_fingerprint,
                "target_fingerprint": target_fingerprint,
                "timestamp": time.time(),
                "mutual_link": connection.get("mutual_link"),
                "central_api_used": False,  # üö´ JAMAIS D'API CENTRALE
                "revolutionary_protocol": True,
                "payload": message
            }
            
            sock.send(json.dumps(secure_message).encode())
            print(f"üì§ Revolutionary secure message sent to {target_fingerprint[:8]}...")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to send revolutionary message: {e}")
            return False
    
    def get_connection_stats(self) -> Dict:
        """Statistiques des connexions r√©volutionnaires"""
        active_count = len(self.active_connections)
        connections = []
        
        for fingerprint, conn in self.active_connections.items():
            duration = int(time.time() - conn["established_at"])
            connections.append({
                "fingerprint": fingerprint[:8] + "...",
                "duration": duration,
                "status": conn["status"],
                "mutual_link": conn.get("mutual_link", "")[:8] + "...",
                "revolutionary": True,
                "central_api": False
            })
            
        return {
            "active_connections": active_count,
            "connections": connections,
            "architecture": "revolutionary_p2p",
            "central_api_abandoned": True
        }

# Syst√®me de d√©couverte "Phare dans la Nuit" r√©volutionnaire
class SecureP2PNetworkBeaconBroadcaster:
    """Broadcaster r√©volutionnaire avec fingerprints cryptographiques"""
    
    def __init__(self, node_beacon: SecureP2PNodeBeacon):
        self.node_beacon = node_beacon
        self.multicast_group = '224.0.1.100'
        self.multicast_port = 5354
        self.broadcast_socket = None
        self.is_running = False
        
        # Chiffrement r√©seau partag√© (pour compatibilit√©)
        self.network_key = self._derive_network_key("OpenRed-P2P-Discovery-2025")
        
    def _derive_network_key(self, passphrase: str) -> bytes:
        """D√©rive cl√© r√©seau depuis passphrase"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=b'openred_p2p_salt_2025',
            iterations=100000,
            backend=default_backend()
        )
        return base64.urlsafe_b64encode(kdf.derive(passphrase.encode()))
    
    def start_broadcasting(self):
        """D√©marre diffusion de beacons r√©volutionnaires"""
        def broadcast_thread():
            try:
                self.broadcast_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                self.broadcast_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                
                self.is_running = True
                print(f"üåê Revolutionary lighthouse beacon started")
                print(f"   Fingerprint: {self.node_beacon.node_fingerprint}")
                print(f"   üö´ NO CENTRAL API - Pure P2P Discovery")
                
                while self.is_running:
                    # Cr√©er beacon r√©volutionnaire
                    beacon = self._create_revolutionary_beacon()
                    
                    # Chiffrer beacon
                    fernet = Fernet(self.network_key)
                    encrypted_beacon = fernet.encrypt(json.dumps(beacon).encode())
                    
                    # Envoyer beacon dans la nuit
                    self.broadcast_socket.sendto(
                        encrypted_beacon,
                        (self.multicast_group, self.multicast_port)
                    )
                    
                    print(f"üåê Revolutionary lighthouse beacon sent: {self.node_beacon.node_fingerprint[:8]}... ({self.node_beacon.sector})")
                    time.sleep(10)  # Beacon toutes les 10 secondes
                    
            except Exception as e:
                print(f"‚ùå Revolutionary beacon error: {e}")
                
        threading.Thread(target=broadcast_thread, daemon=True).start()
    
    def _create_revolutionary_beacon(self) -> Dict:
        """Cr√©e beacon r√©volutionnaire avec fingerprint cryptographique"""
        beacon = asdict(self.node_beacon)
        beacon["timestamp"] = time.time()
        beacon["beacon_type"] = "revolutionary_p2p_discovery"
        beacon["protocol_version"] = "2.0"
        beacon["central_api_abandoned"] = True
        
        # Ajouter m√©tadonn√©es de s√©curit√© r√©volutionnaire
        beacon["security"] = {
            "fingerprint": self.node_beacon.node_fingerprint,
            "hash_display": self.node_beacon.node_hash[:8] + "...",
            "crypto_ready": True,
            "revolutionary_protocol": True,
            "anti_surveillance": True
        }
        
        return beacon
    
    def stop_broadcasting(self):
        """Arr√™te diffusion de beacons r√©volutionnaires"""
        self.is_running = False
        if self.broadcast_socket:
            self.broadcast_socket.close()

class SecureP2PNetworkScanner:
    """Scanner r√©volutionnaire pour d√©couverte de n≈ìuds"""
    
    def __init__(self):
        self.multicast_group = '224.0.1.100'
        self.multicast_port = 5354
        self.scanner_socket = None
        self.is_scanning = False
        self.discovered_nodes = {}
        
        # Cl√© r√©seau partag√©e
        self.network_key = self._derive_network_key("OpenRed-P2P-Discovery-2025")
        
    def _derive_network_key(self, passphrase: str) -> bytes:
        """D√©rive cl√© r√©seau depuis passphrase"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=b'openred_p2p_salt_2025',
            iterations=100000,
            backend=default_backend()
        )
        return base64.urlsafe_b64encode(kdf.derive(passphrase.encode()))
    
    def start_scanning(self):
        """D√©marre scan r√©volutionnaire des beacons"""
        def scanner_thread():
            try:
                self.scanner_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                self.scanner_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                self.scanner_socket.bind(('', self.multicast_port))
                
                # Rejoindre groupe multicast
                mreq = socket.inet_aton(self.multicast_group) + socket.inet_aton('0.0.0.0')
                self.scanner_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
                
                self.is_scanning = True
                print(f"üîç Revolutionary lighthouse scanner started")
                print(f"   üö´ NO CENTRAL API - Scanning for P2P lighthouses")
                
                while self.is_scanning:
                    try:
                        # Recevoir beacon
                        data, addr = self.scanner_socket.recvfrom(4096)
                        
                        # D√©chiffrer beacon
                        fernet = Fernet(self.network_key)
                        decrypted_data = fernet.decrypt(data)
                        beacon = json.loads(decrypted_data.decode())
                        
                        # Traiter beacon r√©volutionnaire
                        if beacon.get("beacon_type") == "revolutionary_p2p_discovery":
                            self._process_revolutionary_beacon(beacon, addr)
                            
                    except Exception as e:
                        if self.is_scanning:  # Ignorer erreurs lors de l'arr√™t
                            continue
                            
            except Exception as e:
                print(f"‚ùå Revolutionary scanner error: {e}")
                
        threading.Thread(target=scanner_thread, daemon=True).start()
    
    def _process_revolutionary_beacon(self, beacon: Dict, addr: Tuple[str, int]):
        """Traite beacon r√©volutionnaire d√©couvert"""
        try:
            fingerprint = beacon.get("node_fingerprint")
            if not fingerprint:
                return
                
            # Mettre √† jour n≈ìud r√©volutionnaire d√©couvert
            self.discovered_nodes[fingerprint] = {
                "node_fingerprint": fingerprint,
                "node_hash": beacon.get("node_hash", ""),
                "sector": beacon.get("sector", "unknown"),
                "services": beacon.get("services", []),
                "activity_level": beacon.get("activity_level", 0),
                "p2p_endpoint": beacon.get("p2p_endpoint", {}),
                "last_seen": time.time(),
                "source_address": addr[0],
                "security": beacon.get("security", {}),
                "revolutionary": True,
                "central_api_used": False
            }
            
            print(f"‚ú® Revolutionary lighthouse discovered: {fingerprint[:8]}... ({beacon.get('sector', 'unknown')})")
            
        except Exception as e:
            print(f"‚ùå Error processing revolutionary beacon: {e}")
    
    def get_discovered_nodes(self) -> List[Dict]:
        """Retourne liste des n≈ìuds r√©volutionnaires d√©couverts"""
        current_time = time.time()
        active_nodes = []
        
        for fingerprint, node_data in self.discovered_nodes.items():
            # N≈ìuds vus dans les 60 derni√®res secondes
            if current_time - node_data["last_seen"] <= 60:
                active_nodes.append(node_data)
                
        return active_nodes
    
    def stop_scanning(self):
        """Arr√™te scan r√©volutionnaire"""
        self.is_scanning = False
        if self.scanner_socket:
            self.scanner_socket.close()

# Test du syst√®me r√©volutionnaire complet
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='O-RedSearch Revolutionary P2P System')
    parser.add_argument('--node-id', required=True, help='Node identifier')
    parser.add_argument('--sector', required=True, help='Node sector')
    parser.add_argument('--port', type=int, default=9000, help='P2P port')
    parser.add_argument('--auto-connect', action='store_true', help='Auto-connect to discovered nodes')
    
    args = parser.parse_args()
    
    # Cr√©er n≈ìud r√©volutionnaire
    node_hash = hashlib.sha256(f"{args.node_id}{time.time()}".encode()).hexdigest()
    
    # Initialiser protocole de s√©curit√© r√©volutionnaire
    security_protocol = SimpleP2PSecurityProtocol(args.node_id)
    
    # Cr√©er beacon r√©volutionnaire avec le M√äME fingerprint que le protocole de s√©curit√©
    revolutionary_beacon = SecureP2PNodeBeacon(
        node_fingerprint=security_protocol.public_key_fingerprint,
        node_hash=node_hash,
        sector=args.sector,
        services=["storage", "compute", "revolutionary_p2p"],
        activity_level=secrets.randbelow(20) + 80,
        zone_hash="zone_" + hashlib.sha256(f"48.8566:2.3522".encode()).hexdigest()[:16],
        p2p_endpoint={"ip": "127.0.0.1", "port": args.port},
        timestamp=time.time()
    )
    
    # D√©marrer tous les syst√®mes r√©volutionnaires
    connection_manager = SecureP2PConnectionManager(revolutionary_beacon, security_protocol)
    broadcaster = SecureP2PNetworkBeaconBroadcaster(revolutionary_beacon)
    scanner = SecureP2PNetworkScanner()
    
    # Lancer services r√©volutionnaires
    connection_manager.start_p2p_server()
    broadcaster.start_broadcasting()
    scanner.start_scanning()
    
    print(f"\nüöÄ O-RedSearch Revolutionary P2P System Started")
    print(f"   üîê Fingerprint: {security_protocol.public_key_fingerprint}")
    print(f"   üè∑Ô∏è Sector: {args.sector}")
    print(f"   üîó P2P Port: {args.port}")
    print(f"   ü§ñ Auto-connect: {args.auto_connect}")
    print(f"   üö´ Central API: ABANDONED")
    print(f"   ‚ö° Architecture: Revolutionary P2P")
    
    # Boucle principale avec d√©couverte et connexion r√©volutionnaire
    try:
        discovery_cycle = 0
        while True:
            time.sleep(15)
            discovery_cycle += 1
            
            # D√©couvrir n≈ìuds r√©volutionnaires
            discovered_nodes = scanner.get_discovered_nodes()
            
            print(f"\nüìä Revolutionary Discovery cycle {discovery_cycle}")
            print(f"   Discovered revolutionary lighthouses: {len(discovered_nodes)}")
            print(f"   üö´ Central API queries: 0 (ABANDONED)")
            
            # Afficher n≈ìuds r√©volutionnaires d√©couverts
            for node in discovered_nodes:
                fingerprint = node['node_fingerprint']
                sector = node['sector']
                activity = node['activity_level']
                print(f"   - üåü {fingerprint[:8]}...: {sector} | Activity: {activity}% | Revolutionary: ‚úÖ")
                
                # Auto-connexion r√©volutionnaire si activ√©e
                if (args.auto_connect and 
                    len(connection_manager.active_connections) < 3 and 
                    fingerprint != security_protocol.public_key_fingerprint):
                    
                    # √âviter auto-connexion et connexions multiples
                    if fingerprint not in connection_manager.active_connections:
                        print(f"üîó Attempting revolutionary connection to {fingerprint[:8]}...")
                        success = connection_manager.connect_to_secure_peer(node)
                        
                        if success:
                            # Envoyer message de test r√©volutionnaire
                            test_message = {
                                "type": "revolutionary_greeting",
                                "content": f"Hello from revolutionary {args.sector} node!",
                                "timestamp": time.time(),
                                "security_level": "revolutionary_p2p",
                                "central_api_abandoned": True,
                                "revolution_message": "Pure P2P has begun!"
                            }
                            connection_manager.send_secure_message(fingerprint, test_message)
            
            # Stats de connexion r√©volutionnaires
            stats = connection_manager.get_connection_stats()
            print(f"\nüîó Revolutionary P2P Connections: {stats['active_connections']}")
            print(f"   Architecture: {stats['architecture'].upper()}")
            print(f"   Central API abandoned: {stats['central_api_abandoned']}")
            for conn in stats['connections']:
                print(f"   - ‚ö° {conn['fingerprint']}: {conn['duration']}s (Link: {conn['mutual_link']}) | Revolutionary: ‚úÖ")
            
            print(f"üåê Revolutionary Network: {len(discovered_nodes)} lighthouses discovered")
            print(f"üö´ Central API usage: ZERO - Revolution achieved!")
            
    except KeyboardInterrupt:
        print(f"\nüõë Stopping Revolutionary P2P System...")
        broadcaster.stop_broadcasting()
        scanner.stop_scanning()
        print(f"‚úÖ Revolutionary P2P system stopped")
        print(f"üåü The revolution continues... Central APIs are dead!")