#!/usr/bin/env python3
"""
üîê Syst√®me de Validation Continue et Rotation des Cl√©s URN
==========================================================

Extension du syst√®me P2P URN-PHANTOM avec :
- Validation continue Node A ‚Üî Node B
- Rotation automatique des cl√©s d'activation
- Registre des cl√©s par URN
- V√©rification des autorisations en temps r√©el

Auteur: Diego Morales Magri
Innovation URN: 25 septembre 2025
"""

import os
import sys
import time
import json
import threading
import hashlib
import secrets
import base64
from datetime import datetime, timedelta
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import requests
from flask import Flask, send_file, jsonify, request
from PIL import Image, ImageTk
import numpy as np
import tkinter as tk
from tkinter import messagebox, ttk
from phantom_urn_system import PhantomUrn

class UrnKeyManager:
    """Gestionnaire de cl√©s URN avec rotation automatique"""
    
    def __init__(self):
        self.urn_registry = {}  # urn_id -> key_info
        self.node_sessions = {}  # node_id -> session_info
        
    def register_urn(self, urn_id: str, node_id: str) -> dict:
        """Enregistrer une nouvelle URN avec g√©n√©ration des cl√©s"""
        current_key = self._generate_activation_key()
        next_key = self._generate_activation_key()
        
        key_info = {
            "urn_id": urn_id,
            "owner_node": node_id,
            "current_key": current_key,
            "next_key": next_key,
            "created_at": datetime.now().isoformat(),
            "last_validation": None,
            "validation_count": 0,
            "authorized_nodes": set(),
            "status": "active"
        }
        
        self.urn_registry[urn_id] = key_info
        
        print(f"üîë URN {urn_id[:8]}... enregistr√©e avec rotation des cl√©s")
        return key_info
    
    def authorize_node_for_urn(self, urn_id: str, node_id: str) -> bool:
        """Autoriser un n≈ìud pour une URN sp√©cifique"""
        if urn_id not in self.urn_registry:
            return False
        
        self.urn_registry[urn_id]["authorized_nodes"].add(node_id)
        print(f"üîê Node {node_id} autoris√© pour URN {urn_id[:8]}...")
        return True
    
    def validate_and_rotate_key(self, urn_id: str, node_id: str, current_session_key: str = None) -> dict:
        """Valider l'acc√®s et effectuer rotation des cl√©s"""
        if urn_id not in self.urn_registry:
            return {"status": "error", "message": "URN not found"}
        
        urn_info = self.urn_registry[urn_id]
        
        # V√©rifier autorisation
        if node_id not in urn_info["authorized_nodes"]:
            return {"status": "error", "message": "Node not authorized"}
        
        # V√©rifier statut URN
        if urn_info["status"] != "active":
            return {"status": "error", "message": "URN not active"}
        
        # Effectuer rotation des cl√©s
        old_current = urn_info["current_key"]
        urn_info["current_key"] = urn_info["next_key"]
        urn_info["next_key"] = self._generate_activation_key()
        urn_info["last_validation"] = datetime.now().isoformat()
        urn_info["validation_count"] += 1
        
        # Enregistrer session
        session_id = self._generate_session_id()
        self.node_sessions[node_id] = {
            "session_id": session_id,
            "urn_id": urn_id,
            "current_key": urn_info["current_key"],
            "expires_at": (datetime.now() + timedelta(minutes=5)).isoformat(),
            "validation_count": urn_info["validation_count"]
        }
        
        print(f"üîÑ Rotation cl√©s URN {urn_id[:8]}... pour {node_id} (validation #{urn_info['validation_count']})")
        
        return {
            "status": "success",
            "session_id": session_id,
            "activation_key": urn_info["current_key"],
            "next_validation_required": True,
            "validation_count": urn_info["validation_count"],
            "expires_at": self.node_sessions[node_id]["expires_at"]
        }
    
    def get_urn_status(self, urn_id: str) -> dict:
        """Obtenir le statut d'une URN"""
        if urn_id not in self.urn_registry:
            return {"exists": False}
        
        urn_info = self.urn_registry[urn_id]
        return {
            "exists": True,
            "status": urn_info["status"],
            "validation_count": urn_info["validation_count"],
            "last_validation": urn_info["last_validation"],
            "authorized_nodes_count": len(urn_info["authorized_nodes"])
        }
    
    def _generate_activation_key(self) -> str:
        """G√©n√©rer une nouvelle cl√© d'activation"""
        key_data = secrets.token_bytes(32)
        return base64.urlsafe_b64encode(key_data).decode()
    
    def _generate_session_id(self) -> str:
        """G√©n√©rer un ID de session unique"""
        return secrets.token_urlsafe(16)

class NodeA_SecureServer:
    """Node A avec validation continue et rotation des cl√©s"""
    
    def __init__(self, port=9300):
        self.port = port
        self.app = Flask(__name__)
        self.urn = PhantomUrn("node_a_secure_urns")
        self.key_manager = UrnKeyManager()
        self.authorized_nodes = set()
        self.real_image_path = "shared-images/test_real_image.jpg"
        self.orp_files = []
        self.urn_mappings = {}  # filename -> urn_id
        self.setup_routes()
        
    def setup_routes(self):
        @self.app.route('/authorize_node', methods=['POST'])
        def authorize_node():
            data = request.get_json()
            node_id = data.get('node_id')
            if node_id:
                self.authorized_nodes.add(node_id)
                print(f"üîë Node A: Autorisation initiale accord√©e √† {node_id}")
                return jsonify({"status": "authorized", "node_id": node_id})
            return jsonify({"error": "node_id required"}), 400
        
        @self.app.route('/validate_urn_access', methods=['POST'])
        def validate_urn_access():
            """Validation continue avec rotation des cl√©s"""
            data = request.get_json()
            node_id = request.headers.get('Node-ID')
            urn_id = data.get('urn_id')
            filename = data.get('filename')
            
            if not node_id or not urn_id:
                return jsonify({"error": "missing parameters"}), 400
            
            # V√©rifier autorisation de base
            if node_id not in self.authorized_nodes:
                return jsonify({"error": "node not authorized"}), 401
            
            # V√©rifier existence fichier (chercher dans tous les mappings)
            file_found = False
            if filename:
                for mapped_file, mapped_urn in self.urn_mappings.items():
                    if mapped_urn == urn_id or filename in mapped_file:
                        file_found = True
                        break
                if not file_found and filename not in self.urn_mappings:
                    print(f"‚ö†Ô∏è  Fichier {filename} non trouv√© dans mappings, autorisation URN quand m√™me")
                    # Ne pas bloquer - autoriser la validation URN
            
            # Autoriser n≈ìud pour cette URN si pas d√©j√† fait
            if urn_id not in self.key_manager.urn_registry:
                # Premi√®re fois - enregistrer URN
                self.key_manager.register_urn(urn_id, "NodeA")
            
            self.key_manager.authorize_node_for_urn(urn_id, node_id)
            
            # Effectuer validation et rotation
            result = self.key_manager.validate_and_rotate_key(urn_id, node_id)
            
            if result["status"] == "success":
                print(f"‚úÖ Validation URN r√©ussie pour {node_id} - Nouvelle cl√© envoy√©e")
                return jsonify({
                    "validation_status": "success",
                    "server_status": "online",
                    "urn_exists": True,
                    "authorization_valid": True,
                    **result
                })
            else:
                return jsonify({"validation_status": "failed", **result}), 403
        
        @self.app.route('/list_files', methods=['GET'])
        def list_files():
            node_id = request.headers.get('Node-ID')
            if node_id not in self.authorized_nodes:
                return jsonify({"error": "unauthorized"}), 401
            
            files = []
            for f in self.orp_files:
                if os.path.exists(f):
                    urn_id = self.urn_mappings.get(f, "unknown")
                    urn_status = self.key_manager.get_urn_status(urn_id)
                    
                    files.append({
                        "filename": f,
                        "size": os.path.getsize(f),
                        "urn_protected": True,
                        "urn_id": urn_id,
                        "urn_status": urn_status,
                        "requires_continuous_validation": True,
                        "classification": "USER_IMAGE",
                        "description": "Image utilisateur avec validation continue"
                    })
            
            return jsonify({"files": files, "node": "A", "server": "Secure URN Server with Key Rotation"})
        
        @self.app.route('/download/<filename>', methods=['GET'])
        def download_file(filename):
            node_id = request.headers.get('Node-ID')
            if node_id not in self.authorized_nodes:
                return jsonify({"error": "unauthorized"}), 401
                
            if not filename.endswith('.orp') or not os.path.exists(filename):
                return jsonify({"error": "file not found"}), 404
            
            print(f"üì§ Node A: Envoi {filename} vers {node_id}")
            return send_file(filename, as_attachment=True)
        
        @self.app.route('/status', methods=['GET'])
        def status():
            return jsonify({
                "node": "A",
                "port": self.port,
                "authorized_nodes": len(self.authorized_nodes),
                "urn_system": "active",
                "key_rotation": "enabled",
                "registered_urns": len(self.key_manager.urn_registry),
                "active_sessions": len(self.key_manager.node_sessions),
                "validation_system": "continuous"
            })
    
    def prepare_real_image_with_urn(self):
        """Pr√©parer image avec syst√®me URN int√©gr√©"""
        print("üé® Node A: Pr√©paration image avec syst√®me URN s√©curis√©...")
        
        if not os.path.exists(self.real_image_path):
            print(f"‚ùå Image non trouv√©e: {self.real_image_path}")
            return False
        
        try:
            # Traitement image (identique √† avant)
            img = Image.open(self.real_image_path)
            print(f"üì∑ Image charg√©e: {img.size} pixels")
            
            max_size = (150, 150)  # Plus petit pour test
            if img.size[0] > max_size[0] or img.size[1] > max_size[1]:
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
                print(f"üìê Redimensionn√©e √†: {img.size}")
            
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # Cr√©er URN pour cette image
            temp_path = "temp_secure_image.png"
            img.save(temp_path)
            
            burn_result = self.urn.burn_image_to_ashes(temp_path, "NodeA_Secure")
            urn_id = burn_result['urn_id']
            
            # Enregistrer URN dans le gestionnaire de cl√©s
            key_info = self.key_manager.register_urn(urn_id, "NodeA")
            
            # Cr√©er fichier .orp avec URN ID
            orp_filename = "secure_real_document.orp"
            img_array = np.array(img)
            
            orp_data = {
                "version": "1.0",
                "phantom_id": "secure_real_img_001",
                "phantom_name": "secure_real_document",
                "urn_id": urn_id,  # Ajout URN ID
                "image_data": img_array.tolist(),
                "metadata": {
                    "classification": "SECURE_USER_IMAGE",
                    "owner": "Node A - Validation Continue",
                    "urn_protected": True,
                    "urn_id": urn_id,
                    "key_rotation_enabled": True,
                    "continuous_validation": True,
                    "created_by": "Diego Morales Magri",
                    "security_level": "MAXIMUM",
                    "projection_duration": 45,
                    "dimensions": {"width": img.size[0], "height": img.size[1]},
                    "burn_timestamp": burn_result['burn_timestamp'],
                    "fragments_count": burn_result['total_fragments']
                }
            }
            
            with open(orp_filename, 'w') as f:
                json.dump(orp_data, f, indent=2)
            
            self.orp_files.append(orp_filename)
            self.urn_mappings[orp_filename] = urn_id
            
            print(f"‚úÖ Fichier .orp s√©curis√© cr√©√©: {orp_filename}")
            print(f"   URN ID: {urn_id}")
            print(f"   Fragments URN: {burn_result['total_fragments']}")
            print(f"   Rotation des cl√©s: ACTIVE")
            
            # Cleanup
            os.remove(temp_path)
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur pr√©paration: {e}")
            return False
    
    def start_server(self):
        """D√©marrer serveur s√©curis√©"""
        print(f"üöÄ Node A: Serveur s√©curis√© avec rotation des cl√©s sur port {self.port}")
        self.app.run(host='127.0.0.1', port=self.port, debug=False, use_reloader=False)

class NodeB_SecureClient:
    """Node B avec validation continue"""
    
    def __init__(self):
        self.node_id = "SecureUserNode_B"
        self.server_url = "http://127.0.0.1:9300"
        self.urn = PhantomUrn("node_b_secure_urns")
        self.root = None
        self.current_urn_id = None
        self.current_session = None
        self.validation_timer = None
        
    def create_secure_ui(self):
        """Interface avec validation continue"""
        self.root = tk.Tk()
        self.root.title("üîê Node B - Client URN S√©curis√© avec Validation Continue")
        self.root.geometry("700x600")
        self.root.configure(bg='#0d1117')
        
        # Titre
        title = tk.Label(self.root, 
                        text="üîêüîÑ URN-PHANTOM Client avec Rotation des Cl√©s", 
                        font=('Arial', 14, 'bold'), fg='#58a6ff', bg='#0d1117')
        title.pack(pady=15)
        
        # Statut validation continue
        self.validation_status_var = tk.StringVar(value="üî¥ Validation continue: Inactive")
        validation_status = tk.Label(self.root, textvariable=self.validation_status_var,
                                   font=('Arial', 10, 'bold'), fg='#f85149', bg='#0d1117')
        validation_status.pack(pady=5)
        
        # Compteur validations
        self.validation_count_var = tk.StringVar(value="Validations: 0")
        validation_count = tk.Label(self.root, textvariable=self.validation_count_var,
                                  font=('Arial', 9), fg='#7d8590', bg='#0d1117')
        validation_count.pack()
        
        # Boutons
        btn_frame = tk.Frame(self.root, bg='#0d1117')
        btn_frame.pack(pady=20)
        
        self.connect_btn = tk.Button(btn_frame, text="üîó Connexion S√©curis√©e", 
                                   command=self.secure_connect, font=('Arial', 10, 'bold'),
                                   bg='#238636', fg='white', relief='raised')
        self.connect_btn.pack(pady=5, fill='x')
        
        self.list_btn = tk.Button(btn_frame, text="üìã Lister Fichiers URN", 
                                command=self.list_secure_files, font=('Arial', 10),
                                bg='#0969da', fg='white', state='disabled')
        self.list_btn.pack(pady=5, fill='x')
        
        self.download_btn = tk.Button(btn_frame, text="üì• T√©l√©chargement S√©curis√©", 
                                    command=self.secure_download, font=('Arial', 10),
                                    bg='#8957e5', fg='white', state='disabled')
        self.download_btn.pack(pady=5, fill='x')
        
        self.open_btn = tk.Button(btn_frame, text="üîì Ouverture avec Validation Continue", 
                                command=self.open_with_continuous_validation, font=('Arial', 10),
                                bg='#da3633', fg='white', state='disabled')
        self.open_btn.pack(pady=5, fill='x')
        
        # Log s√©curis√©
        log_frame = tk.LabelFrame(self.root, text="üìù Journal S√©curis√©", fg='#f0f6fc', bg='#0d1117')
        log_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        self.log_text = tk.Text(log_frame, height=15, bg='#161b22', fg='#c9d1d9',
                               font=('Consolas', 8), insertbackground='#58a6ff')
        scrollbar = tk.Scrollbar(log_frame, orient='vertical', command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # Variables
        self.connected = False
        self.available_files = []
        self.selected_file = None
        self.downloaded_files = []
        
        self.log("üöÄ Client URN s√©curis√© avec validation continue d√©marr√©")
        self.log("üîê Syst√®me de rotation des cl√©s pr√™t")
    
    def log(self, message):
        """Log avec horodatage"""
        timestamp = time.strftime("[%H:%M:%S]")
        full_message = f"{timestamp} {message}\n"
        
        if self.log_text:
            self.log_text.insert(tk.END, full_message)
            self.log_text.see(tk.END)
        print(full_message.strip())
    
    def secure_connect(self):
        """Connexion s√©curis√©e avec Node A"""
        self.log("üîë √âtablissement connexion s√©curis√©e...")
        
        try:
            response = requests.post(
                f"{self.server_url}/authorize_node",
                json={"node_id": self.node_id},
                timeout=10
            )
            
            if response.status_code == 200:
                self.connected = True
                self.list_btn.config(state='normal')
                self.log("‚úÖ Connexion s√©curis√©e √©tablie")
                self.log("üîê Pr√™t pour validation continue")
            else:
                self.log(f"‚ùå Connexion refus√©e: {response.text}")
                
        except Exception as e:
            self.log(f"‚ùå Erreur connexion: {e}")
    
    def validate_urn_continuously(self, urn_id: str, filename: str):
        """Validation continue avec Node A"""
        if not self.connected or not urn_id:
            return False
        
        try:
            headers = {"Node-ID": self.node_id}
            data = {"urn_id": urn_id, "filename": filename}
            
            response = requests.post(
                f"{self.server_url}/validate_urn_access",
                json=data, headers=headers, timeout=10
            )
            
            if response.status_code == 200:
                validation_data = response.json()
                
                if validation_data.get("validation_status") == "success":
                    self.current_session = validation_data
                    count = validation_data.get("validation_count", 0)
                    
                    self.validation_status_var.set("üü¢ Validation continue: Active")
                    self.validation_count_var.set(f"Validations: {count}")
                    
                    self.log(f"‚úÖ Validation #{count} r√©ussie - Nouvelle cl√© re√ßue")
                    self.log(f"üîÑ Prochaine validation dans 30s")
                    
                    # Programmer prochaine validation
                    if self.validation_timer:
                        self.root.after_cancel(self.validation_timer)
                    self.validation_timer = self.root.after(30000, 
                        lambda: self.validate_urn_continuously(urn_id, filename))
                    
                    return True
                else:
                    self.log(f"‚ùå Validation √©chou√©e: {validation_data.get('message')}")
                    self.validation_status_var.set("üî¥ Validation continue: √âchec")
                    return False
            else:
                self.log(f"‚ùå Erreur serveur validation: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Erreur validation continue: {e}")
            self.validation_status_var.set("üî¥ Validation continue: Erreur")
            return False
    
    def list_secure_files(self):
        """Lister fichiers avec info s√©curit√©"""
        if not self.connected:
            return
        
        self.log("üìã R√©cup√©ration fichiers s√©curis√©s...")
        
        try:
            headers = {"Node-ID": self.node_id}
            response = requests.get(f"{self.server_url}/list_files", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.available_files = data.get('files', [])
                
                self.log(f"üìÅ {len(self.available_files)} fichier(s) URN trouv√©(s):")
                for file_info in self.available_files:
                    self.log(f"   üìÑ {file_info['filename']}")
                    self.log(f"      üîê URN ID: {file_info.get('urn_id', 'N/A')[:8]}...")
                    self.log(f"      üîÑ Validation continue: {file_info.get('requires_continuous_validation')}")
                
                if self.available_files:
                    self.selected_file = self.available_files[0]
                    self.download_btn.config(state='normal')
                    
        except Exception as e:
            self.log(f"‚ùå Erreur liste: {e}")
    
    def secure_download(self):
        """T√©l√©chargement s√©curis√©"""
        if not self.selected_file:
            return
        
        filename = self.selected_file['filename']
        self.log(f"üì• T√©l√©chargement s√©curis√© {filename}...")
        
        try:
            headers = {"Node-ID": self.node_id}
            response = requests.get(
                f"{self.server_url}/download/{filename}",
                headers=headers, stream=True, timeout=30
            )
            
            if response.status_code == 200:
                local_filename = f"secure_{filename}"
                
                with open(local_filename, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                self.downloaded_files.append(local_filename)
                self.current_urn_id = self.selected_file.get('urn_id')
                
                self.log(f"‚úÖ T√©l√©chargement s√©curis√© termin√©")
                self.log(f"üÜî URN ID: {self.current_urn_id[:8]}...")
                
                self.open_btn.config(state='normal')
                
        except Exception as e:
            self.log(f"‚ùå Erreur t√©l√©chargement: {e}")
    
    def open_with_continuous_validation(self):
        """Ouverture avec validation continue active"""
        if not self.downloaded_files or not self.current_urn_id:
            return
        
        filename = self.downloaded_files[-1]
        self.log(f"üîì Ouverture avec validation continue...")
        
        # D√©marrer validation continue
        if self.validate_urn_continuously(self.current_urn_id, filename):
            self.log("üîÑ Validation continue d√©marr√©e")
            
            # Ouvrir le fichier (logique existante)
            try:
                with open(filename, 'r') as f:
                    orp_data = json.load(f)
                
                image_data = np.array(orp_data["image_data"], dtype=np.uint8)
                metadata = orp_data["metadata"]
                
                self.log("üñ•Ô∏è  Ouverture √©cran s√©curis√© avec validation continue...")
                self.open_validated_screen(image_data, metadata)
                
            except Exception as e:
                self.log(f"‚ùå Erreur ouverture: {e}")
    
    def open_validated_screen(self, image_data, metadata):
        """√âcran s√©curis√© avec validation continue visible"""
        secure_window = tk.Toplevel(self.root)
        secure_window.title("üîê √âCRAN S√âCURIS√â - VALIDATION CONTINUE ACTIVE")
        secure_window.geometry("600x500")
        secure_window.configure(bg='#0d1117')
        secure_window.attributes('-topmost', True)
        
        # Header avec statut validation
        header = tk.Frame(secure_window, bg='#0d1117')
        header.pack(fill='x', padx=10, pady=5)
        
        validation_label = tk.Label(header, 
            text="üîÑ VALIDATION CONTINUE ACTIVE - CL√â ROTATION EN COURS",
            font=('Arial', 10, 'bold'), fg='#58a6ff', bg='#0d1117')
        validation_label.pack()
        
        status_label = tk.Label(header, textvariable=self.validation_status_var,
                              font=('Arial', 9), fg='#7d8590', bg='#0d1117')
        status_label.pack()
        
        count_label = tk.Label(header, textvariable=self.validation_count_var,
                             font=('Arial', 8), fg='#7d8590', bg='#0d1117')
        count_label.pack()
        
        # Image
        img_frame = tk.LabelFrame(secure_window, text="üñºÔ∏è  Image Prot√©g√©e URN", 
                                 fg='#f0f6fc', bg='#0d1117')
        img_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        img = Image.fromarray(image_data)
        img.thumbnail((400, 300))
        photo = ImageTk.PhotoImage(img)
        
        img_label = tk.Label(img_frame, image=photo, bg='#0d1117')
        img_label.photo = photo
        img_label.pack(expand=True)
        
        # Info s√©curit√©
        info_text = f"""üîê Protection URN Active
URN ID: {metadata.get('urn_id', 'N/A')[:16]}...
Fragments: {metadata.get('fragments_count', 'N/A')}
Validation Continue: ‚úÖ ACTIVE
Rotation des Cl√©s: ‚úÖ ACTIVE"""
        
        info_label = tk.Label(secure_window, text=info_text, justify='left',
                            font=('Consolas', 8), fg='#c9d1d9', bg='#0d1117')
        info_label.pack(padx=10, pady=5)
        
        self.log("üñ•Ô∏è  √âcran s√©curis√© ouvert avec validation continue")
    
    def run(self):
        """D√©marrer client s√©curis√©"""
        self.create_secure_ui()
        
        # Cleanup √† la fermeture
        def on_closing():
            if self.validation_timer:
                self.root.after_cancel(self.validation_timer)
            self.root.destroy()
        
        self.root.protocol("WM_DELETE_WINDOW", on_closing)
        self.root.mainloop()

def start_secure_system():
    """D√©marrer syst√®me P2P s√©curis√© avec validation continue"""
    print("üîêüîÑ SYST√àME P2P URN S√âCURIS√â - VALIDATION CONTINUE")
    print("Diego Morales Magri - Rotation des Cl√©s URN")
    print("=" * 65)
    
    # D√©marrer Node A s√©curis√©
    print("üöÄ D√©marrage Node A avec rotation des cl√©s...")
    server = NodeA_SecureServer()
    
    if not server.prepare_real_image_with_urn():
        print("‚ùå √âchec pr√©paration image s√©curis√©e")
        return
    
    # Serveur en thread
    server_thread = threading.Thread(target=server.start_server)
    server_thread.daemon = True
    server_thread.start()
    
    time.sleep(3)
    
    # V√©rifier serveur
    try:
        response = requests.get("http://127.0.0.1:9300/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur s√©curis√© op√©rationnel")
        else:
            print("‚ùå Serveur non accessible")
            return
    except:
        print("‚ùå Erreur connexion serveur")
        return
    
    print("\nüéÆ D√©marrage client avec validation continue...")
    
    # Client s√©curis√©
    client = NodeB_SecureClient()
    
    try:
        client.run()
    except KeyboardInterrupt:
        print("\nüîö Arr√™t syst√®me s√©curis√©")
    except Exception as e:
        print(f"\nüí• Erreur: {e}")

if __name__ == "__main__":
    start_secure_system()