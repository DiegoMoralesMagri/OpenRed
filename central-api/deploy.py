#!/usr/bin/env python3
"""
Utilitaire de D√©ploiement Automatis√© - OpenRed Central API v2.0
Script pour automatiser le d√©ploiement en production
"""

import os
import sys
import subprocess
import json
import shutil
from pathlib import Path
import argparse
from datetime import datetime


class DeploymentManager:
    """Gestionnaire de d√©ploiement automatis√©"""
    
    def __init__(self, environment="production"):
        self.environment = environment
        self.project_root = Path(__file__).parent
        self.config_file = self.project_root / f"config_{environment}.json"
        self.backup_dir = self.project_root / "backups"
        
    def load_config(self):
        """Charger la configuration de d√©ploiement"""
        if self.config_file.exists():
            with open(self.config_file, 'r') as f:
                return json.load(f)
        else:
            # Configuration par d√©faut
            default_config = {
                "database": {
                    "type": "sqlite",
                    "path": "openred_prod.db"
                },
                "server": {
                    "host": "0.0.0.0",
                    "port": 8000,
                    "workers": 4
                },
                "security": {
                    "cors_enabled": False,
                    "https_only": True
                },
                "monitoring": {
                    "enabled": True,
                    "log_level": "INFO"
                }
            }
            
            # Sauvegarder la config par d√©faut
            self.save_config(default_config)
            return default_config
    
    def save_config(self, config):
        """Sauvegarder la configuration"""
        with open(self.config_file, 'w') as f:
            json.dump(config, f, indent=2)
    
    def run_command(self, command, description, check=True):
        """Ex√©cuter une commande avec gestion d'erreur"""
        print(f"üîÑ {description}...")
        print(f"   Commande: {command}")
        
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                check=check
            )
            
            if result.stdout:
                print(f"   Sortie: {result.stdout.strip()}")
            
            print(f"   ‚úÖ {description} termin√©")
            return result
            
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå Erreur lors de {description}")
            print(f"   Code d'erreur: {e.returncode}")
            if e.stdout:
                print(f"   Sortie: {e.stdout.strip()}")
            if e.stderr:
                print(f"   Erreur: {e.stderr.strip()}")
            
            if check:
                sys.exit(1)
            return None
    
    def check_prerequisites(self):
        """V√©rifier les pr√©requis pour le d√©ploiement"""
        print("üîç V√©rification des pr√©requis...")
        
        # V√©rifier Python
        python_version = sys.version_info
        if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
            print("‚ùå Python 3.8+ requis")
            return False
        
        print(f"   ‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        
        # V√©rifier les fichiers requis
        required_files = [
            "main_new.py",
            "requirements.txt"
        ]
        
        for file in required_files:
            if not (self.project_root / file).exists():
                print(f"‚ùå Fichier manquant: {file}")
                return False
            print(f"   ‚úÖ {file}")
        
        # V√©rifier les d√©pendances syst√®me (optionnel)
        system_deps = {
            "git": "git --version",
            "nginx": "nginx -v"  # Optionnel pour la production
        }
        
        for dep, cmd in system_deps.items():
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ {dep} disponible")
            else:
                print(f"   ‚ö†Ô∏è {dep} non disponible (optionnel)")
        
        return True
    
    def create_backup(self):
        """Cr√©er une sauvegarde avant d√©ploiement"""
        print("üíæ Cr√©ation de la sauvegarde...")
        
        # Cr√©er le dossier de backup
        self.backup_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup_{self.environment}_{timestamp}"
        backup_path = self.backup_dir / backup_name
        
        # Sauvegarder la base de donn√©es
        db_files = list(self.project_root.glob("*.db"))
        if db_files:
            backup_path.mkdir(exist_ok=True)
            for db_file in db_files:
                shutil.copy2(db_file, backup_path / db_file.name)
                print(f"   ‚úÖ Sauvegarde de {db_file.name}")
        
        # Sauvegarder les fichiers de configuration
        config_files = list(self.project_root.glob("config_*.json"))
        if config_files and backup_path.exists():
            for config_file in config_files:
                shutil.copy2(config_file, backup_path / config_file.name)
                print(f"   ‚úÖ Sauvegarde de {config_file.name}")
        
        if backup_path.exists():
            print(f"   ‚úÖ Sauvegarde cr√©√©e: {backup_path}")
            return backup_path
        else:
            print("   ‚ö†Ô∏è Aucune sauvegarde n√©cessaire")
            return None
    
    def setup_environment(self):
        """Configurer l'environnement Python"""
        print("üêç Configuration de l'environnement Python...")
        
        # V√©rifier si un venv existe
        venv_path = self.project_root.parent / ".venv"
        if not venv_path.exists():
            print("   Cr√©ation de l'environnement virtuel...")
            self.run_command(
                f"python -m venv {venv_path}",
                "Cr√©ation du venv"
            )
        
        # Activation du venv et installation des d√©pendances
        if os.name == 'nt':  # Windows
            pip_cmd = str(venv_path / "Scripts" / "pip.exe")
            python_cmd = str(venv_path / "Scripts" / "python.exe")
        else:  # Unix/Linux
            pip_cmd = str(venv_path / "bin" / "pip")
            python_cmd = str(venv_path / "bin" / "python")
        
        # Installer les d√©pendances
        self.run_command(
            f"{pip_cmd} install --upgrade pip",
            "Mise √† jour de pip"
        )
        
        self.run_command(
            f"{pip_cmd} install -r requirements.txt",
            "Installation des d√©pendances"
        )
        
        return python_cmd
    
    def setup_database(self):
        """Configurer la base de donn√©es"""
        print("üóÑÔ∏è Configuration de la base de donn√©es...")
        
        config = self.load_config()
        db_config = config.get("database", {})
        
        if db_config.get("type") == "sqlite":
            db_path = self.project_root / db_config.get("path", "openred_prod.db")
            
            if not db_path.exists():
                print(f"   Cr√©ation de la base de donn√©es: {db_path}")
                # La base sera cr√©√©e automatiquement par l'application
            else:
                print(f"   ‚úÖ Base de donn√©es existante: {db_path}")
        
        elif db_config.get("type") == "postgresql":
            print("   Configuration PostgreSQL d√©tect√©e")
            print("   ‚ö†Ô∏è Assurez-vous que PostgreSQL est configur√© s√©par√©ment")
        
        print("   ‚úÖ Configuration de la base de donn√©es termin√©e")
    
    def setup_systemd_service(self, python_cmd):
        """Cr√©er un service systemd (Linux uniquement)"""
        if os.name == 'nt':
            print("   ‚ö†Ô∏è Service systemd non disponible sur Windows")
            return
        
        print("üîß Configuration du service systemd...")
        
        service_content = f"""[Unit]
Description=OpenRed Central API v2.0
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory={self.project_root}
Environment=PATH={Path(python_cmd).parent}
ExecStart={python_cmd} main_new.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
        
        service_file = Path(f"/tmp/openred-central-api.service")
        with open(service_file, 'w') as f:
            f.write(service_content)
        
        print(f"   ‚úÖ Fichier de service cr√©√©: {service_file}")
        print(f"   üìã Pour installer le service:")
        print(f"      sudo cp {service_file} /etc/systemd/system/")
        print(f"      sudo systemctl daemon-reload")
        print(f"      sudo systemctl enable openred-central-api")
        print(f"      sudo systemctl start openred-central-api")
    
    def setup_nginx_config(self):
        """Cr√©er la configuration nginx"""
        print("üåê Configuration nginx...")
        
        config = self.load_config()
        server_config = config.get("server", {})
        port = server_config.get("port", 8000)
        
        nginx_content = f"""server {{
    listen 80;
    server_name your-domain.com;  # Remplacez par votre domaine
    
    # Redirection vers HTTPS
    return 301 https://$server_name$request_uri;
}}

server {{
    listen 443 ssl http2;
    server_name your-domain.com;  # Remplacez par votre domaine
    
    # Certificats SSL (√† configurer)
    # ssl_certificate /path/to/certificate.crt;
    # ssl_certificate_key /path/to/private.key;
    
    # Configuration SSL s√©curis√©e
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # S√©curit√©
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Proxy vers l'API
    location / {{
        proxy_pass http://127.0.0.1:{port};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }}
    
    # Logs
    access_log /var/log/nginx/openred_access.log;
    error_log /var/log/nginx/openred_error.log;
}}
"""
        
        nginx_file = Path("/tmp/openred-nginx.conf")
        with open(nginx_file, 'w') as f:
            f.write(nginx_content)
        
        print(f"   ‚úÖ Configuration nginx cr√©√©e: {nginx_file}")
        print(f"   üìã Pour installer la configuration:")
        print(f"      sudo cp {nginx_file} /etc/nginx/sites-available/openred")
        print(f"      sudo ln -s /etc/nginx/sites-available/openred /etc/nginx/sites-enabled/")
        print(f"      sudo nginx -t")
        print(f"      sudo systemctl reload nginx")
    
    def run_tests(self, python_cmd):
        """Ex√©cuter les tests avant d√©ploiement"""
        print("üß™ Ex√©cution des tests...")
        
        # Tests basiques
        test_files = list(self.project_root.glob("test_*.py"))
        
        if test_files:
            for test_file in test_files:
                self.run_command(
                    f"{python_cmd} {test_file}",
                    f"Test {test_file.name}",
                    check=False  # Ne pas arr√™ter en cas d'√©chec
                )
        else:
            print("   ‚ö†Ô∏è Aucun fichier de test trouv√©")
        
        # Test de d√©marrage
        print("   Test de d√©marrage de l'API...")
        result = self.run_command(
            f"{python_cmd} -c \"import main_new; print('Import r√©ussi')\"",
            "Test d'import",
            check=False
        )
        
        if result and result.returncode == 0:
            print("   ‚úÖ Test de d√©marrage r√©ussi")
        else:
            print("   ‚ùå √âchec du test de d√©marrage")
    
    def deploy(self):
        """Ex√©cuter le d√©ploiement complet"""
        print("üöÄ D√âMARRAGE DU D√âPLOIEMENT")
        print(f"Environnement: {self.environment}")
        print(f"Dossier: {self.project_root}")
        print("=" * 60)
        
        # 1. V√©rification des pr√©requis
        if not self.check_prerequisites():
            print("‚ùå Pr√©requis non satisfaits")
            return False
        
        print()
        
        # 2. Sauvegarde
        backup_path = self.create_backup()
        print()
        
        # 3. Configuration de l'environnement
        python_cmd = self.setup_environment()
        print()
        
        # 4. Configuration de la base de donn√©es
        self.setup_database()
        print()
        
        # 5. Tests
        self.run_tests(python_cmd)
        print()
        
        # 6. Configuration des services (production)
        if self.environment == "production":
            self.setup_systemd_service(python_cmd)
            print()
            
            self.setup_nginx_config()
            print()
        
        # 7. R√©sum√© final
        print("‚úÖ D√âPLOIEMENT TERMIN√â")
        print("=" * 60)
        print(f"üêç Commande Python: {python_cmd}")
        print(f"üìÅ Dossier du projet: {self.project_root}")
        print(f"‚öôÔ∏è Configuration: {self.config_file}")
        
        if backup_path:
            print(f"üíæ Sauvegarde: {backup_path}")
        
        print("\nüìã √âTAPES SUIVANTES:")
        print("1. Tester l'API manuellement:")
        print(f"   {python_cmd} main_new.py")
        
        if self.environment == "production":
            print("2. Configurer SSL/TLS pour nginx")
            print("3. Installer et d√©marrer les services systemd")
            print("4. Configurer les sauvegardes automatiques")
            print("5. Mettre en place le monitoring")
        
        print("\nüéâ D√©ploiement r√©ussi!")
        return True


def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="Utilitaire de d√©ploiement OpenRed Central API v2.0")
    parser.add_argument(
        "--env",
        choices=["development", "staging", "production"],
        default="production",
        help="Environnement de d√©ploiement"
    )
    parser.add_argument(
        "--skip-tests",
        action="store_true",
        help="Ignorer l'ex√©cution des tests"
    )
    
    args = parser.parse_args()
    
    # Cr√©er le gestionnaire de d√©ploiement
    deployer = DeploymentManager(environment=args.env)
    
    # Confirmation pour la production
    if args.env == "production":
        response = input("‚ö†Ô∏è D√©ploiement en PRODUCTION. Continuer? (oui/non): ")
        if response.lower() not in ["oui", "yes", "y", "o"]:
            print("D√©ploiement annul√©.")
            return
    
    # Lancer le d√©ploiement
    success = deployer.deploy()
    
    if success:
        sys.exit(0)
    else:
        print("‚ùå √âchec du d√©ploiement")
        sys.exit(1)


if __name__ == "__main__":
    main()
