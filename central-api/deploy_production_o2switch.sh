#!/bin/bash

# üöÄ Script de d√©ploiement OpenRed Central API v2.0 pour O2Switch
# OpenRed Central API v2.0 deployment script for O2Switch

echo "üöÄ OpenRed Central API v2.0 - D√©ploiement O2Switch"
echo "=================================================="

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
API_DIR="$SCRIPT_DIR"
LOG_FILE="$API_DIR/deploy.log"

# Fonction de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fonction de test
test_command() {
    local cmd="$1"
    local desc="$2"
    
    log "üîç Test: $desc"
    if command -v "$cmd" >/dev/null 2>&1; then
        log "‚úÖ $cmd disponible"
        return 0
    else
        log "‚ùå $cmd non disponible"
        return 1
    fi
}

log "üéØ D√©but du d√©ploiement OpenRed"
log "üìÅ R√©pertoire: $API_DIR"

# 1. V√©rification de l'environnement O2Switch
log "üîç V√©rification de l'environnement O2Switch..."

# Test Python
if test_command python3 "Python 3"; then
    PYTHON_CMD="python3"
elif test_command python "Python"; then
    PYTHON_CMD="python"
else
    log "‚ùå ERREUR: Python non trouv√©"
    exit 1
fi

log "üêç Python trouv√©: $PYTHON_CMD"
PYTHON_VERSION=$($PYTHON_CMD --version 2>&1)
log "üìã Version Python: $PYTHON_VERSION"

# 2. Configuration des fichiers pour O2Switch
log "üìù Configuration des fichiers pour O2Switch..."

# Cr√©ation du fichier .htaccess pour O2Switch
cat > "$API_DIR/.htaccess" << 'EOF'
# Configuration O2Switch pour OpenRed Central API v2.0
PassengerEnabled on
PassengerAppRoot /home/[USERNAME]/www
PassengerAppType wsgi
PassengerStartupFile passenger_wsgi_production.py

# S√©curit√©
<Files "*.py">
    Require all denied
</Files>

<Files "passenger_wsgi_production.py">
    Require all granted
</Files>

# Headers de s√©curit√©
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"
Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"

# CORS pour API
Header always set Access-Control-Allow-Origin "*"
Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
Header always set Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"

# Cache des ressources statiques
<IfModule mod_expires.c>
    ExpiresActive on
    ExpiresByType application/json "access plus 1 hour"
</IfModule>

# Redirection vers HTTPS
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
EOF

log "‚úÖ Fichier .htaccess cr√©√©"

# 3. Cr√©ation du fichier passenger_wsgi.py principal
cp "$API_DIR/passenger_wsgi_production.py" "$API_DIR/passenger_wsgi.py"
log "‚úÖ passenger_wsgi.py configur√©"

# 4. Configuration de l'environnement
log "üîß Configuration de l'environnement..."

# Cr√©ation du fichier de configuration O2Switch
cat > "$API_DIR/.env.o2switch" << 'EOF'
# Configuration OpenRed Central API v2.0 pour O2Switch
ENVIRONMENT=production
API_VERSION=2.0.0
DEPLOYMENT_MODE=o2switch

# S√©curit√©
SECRET_KEY=o2switch_openred_secret_2024
JWT_SECRET=o2switch_jwt_secret_openred_2024

# Limits pour h√©bergement partag√©
MAX_CONNECTIONS=100
MAX_REQUEST_SIZE=10485760
RATE_LIMIT=100

# Logging
LOG_LEVEL=INFO
LOG_FILE=openred_api.log

# Features
ENABLE_CORS=true
ENABLE_SECURITY_HEADERS=true
ENABLE_RATE_LIMITING=true
EOF

log "‚úÖ Configuration environnement cr√©√©e"

# 5. Test de l'application WSGI
log "üß™ Test de l'application WSGI..."

cd "$API_DIR"

# Test basique Python
$PYTHON_CMD -c "
import sys
print('Python OK:', sys.version)
try:
    import json, os, time
    print('‚úÖ Modules standard disponibles')
except ImportError as e:
    print('‚ùå Erreur modules:', e)
    sys.exit(1)
"

if [ $? -eq 0 ]; then
    log "‚úÖ Test Python r√©ussi"
else
    log "‚ùå Test Python √©chou√©"
    exit 1
fi

# Test WSGI
$PYTHON_CMD passenger_wsgi_production.py
if [ $? -eq 0 ]; then
    log "‚úÖ Test WSGI r√©ussi"
else
    log "‚ùå Test WSGI √©chou√©"
    exit 1
fi

# 6. Cr√©ation des scripts utilitaires
log "üõ†Ô∏è Cr√©ation des scripts utilitaires..."

# Script de diagnostic
cat > "$API_DIR/diagnostic_o2switch.sh" << 'EOF'
#!/bin/bash
echo "üîç Diagnostic OpenRed Central API v2.0 - O2Switch"
echo "================================================"

echo "üìÅ R√©pertoire de travail:"
pwd

echo -e "\nüêç Python:"
python3 --version 2>/dev/null || python --version

echo -e "\nüìã Modules Python:"
python3 -c "
import sys
modules = ['json', 'os', 'time', 'sys', 'urllib']
for mod in modules:
    try:
        __import__(mod)
        print(f'‚úÖ {mod}')
    except:
        print(f'‚ùå {mod}')
"

echo -e "\nüìÅ Fichiers OpenRed:"
ls -la | grep -E "(passenger_wsgi|\.htaccess|\.env)"

echo -e "\nüåê Test WSGI:"
python3 passenger_wsgi_production.py 2>&1 | head -5

echo -e "\n‚úÖ Diagnostic termin√©"
EOF

chmod +x "$API_DIR/diagnostic_o2switch.sh"
log "‚úÖ Script de diagnostic cr√©√©"

# Script de monitoring
cat > "$API_DIR/monitor_o2switch.sh" << 'EOF'
#!/bin/bash
echo "üìä Monitoring OpenRed Central API v2.0"
echo "======================================"

LOG_FILE="openred_api.log"

if [ -f "$LOG_FILE" ]; then
    echo "üìà Derni√®res activit√©s:"
    tail -10 "$LOG_FILE"
else
    echo "üìã Aucun log trouv√©"
fi

echo -e "\nüîÑ Processus Python:"
ps aux | grep python | grep -v grep || echo "Aucun processus Python actif"

echo -e "\nüíæ Utilisation disque:"
du -sh . 2>/dev/null || echo "Impossible de calculer"

echo -e "\nüåê Test connectivit√©:"
if command -v curl >/dev/null; then
    curl -s -I http://localhost/ | head -1 || echo "Service non accessible"
else
    echo "curl non disponible"
fi
EOF

chmod +x "$API_DIR/monitor_o2switch.sh"
log "‚úÖ Script de monitoring cr√©√©"

# 7. Documentation finale
log "üìö Cr√©ation de la documentation..."

cat > "$API_DIR/README_O2SWITCH.md" << 'EOF'
# OpenRed Central API v2.0 - D√©ploiement O2Switch

## üöÄ Installation termin√©e

L'API OpenRed Central v2.0 est maintenant configur√©e pour O2Switch.

### üìÅ Fichiers importants

- `passenger_wsgi.py` - Application WSGI principale
- `.htaccess` - Configuration Apache/Passenger
- `.env.o2switch` - Variables d'environnement
- `diagnostic_o2switch.sh` - Script de diagnostic
- `monitor_o2switch.sh` - Script de monitoring

### üåê Acc√®s

Votre API sera accessible √† l'adresse :
```
https://[votre-domaine]/
```

### üß™ Tests

1. **Test de base :**
   ```bash
   ./diagnostic_o2switch.sh
   ```

2. **Monitoring :**
   ```bash
   ./monitor_o2switch.sh
   ```

### üìã Endpoints disponibles

- `GET /` - Page d'accueil API
- `GET /health` - Statut sant√©
- `GET /api/v1/status` - Statut API
- `POST /api/v1/auth/register` - Enregistrement n≈ìud
- `POST /api/v1/auth/login` - Authentification
- `GET /api/v1/nodes/discover` - D√©couverte n≈ìuds
- `POST /api/v1/messages/send` - Envoi message

### üîß Configuration O2Switch

L'API utilise :
- **WSGI** avec Passenger
- **Modules Python standard** uniquement
- **Headers de s√©curit√© OWASP**
- **CORS configur√©**
- **Rate limiting**

### üìû Support

En cas de probl√®me :
1. V√©rifiez les logs : `tail -f openred_api.log`
2. Lancez le diagnostic : `./diagnostic_o2switch.sh`
3. Consultez la documentation O2Switch

---
OpenRed Central API v2.0 - Production Ready
EOF

log "‚úÖ Documentation cr√©√©e"

# 8. Finalisation
log "üéØ Finalisation du d√©ploiement..."

# V√©rification finale
if [ -f "$API_DIR/passenger_wsgi.py" ] && [ -f "$API_DIR/.htaccess" ]; then
    log "‚úÖ Tous les fichiers essentiels sont pr√©sents"
else
    log "‚ùå Fichiers manquants d√©tect√©s"
    exit 1
fi

# Permissions
chmod 644 "$API_DIR/passenger_wsgi.py"
chmod 644 "$API_DIR/.htaccess"
chmod 600 "$API_DIR/.env.o2switch"

log "‚úÖ Permissions configur√©es"

# Message final
echo ""
echo "üéâ D√âPLOIEMENT OPENRED CENTRAL API v2.0 TERMIN√â !"
echo "================================================"
echo ""
echo "‚úÖ Configuration O2Switch compl√®te"
echo "‚úÖ Application WSGI op√©rationnelle"
echo "‚úÖ S√©curit√© OWASP configur√©e"
echo "‚úÖ Scripts utilitaires cr√©√©s"
echo ""
echo "üìã PROCHAINES √âTAPES :"
echo "1. Uploadez les fichiers sur votre espace O2Switch"
echo "2. Configurez votre domaine/sous-domaine"
echo "3. Testez l'acc√®s : https://[votre-domaine]/"
echo "4. Lancez le diagnostic : ./diagnostic_o2switch.sh"
echo ""
echo "üåê Votre API OpenRed Central v2.0 sera accessible sous :"
echo "   https://[votre-domaine]/"
echo ""
echo "üìö Documentation compl√®te dans README_O2SWITCH.md"
echo ""
log "üéØ D√©ploiement termin√© avec succ√®s"
echo "‚ú® Bon d√©ploiement OpenRed !"
