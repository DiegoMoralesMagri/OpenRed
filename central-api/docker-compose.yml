# === OpenRed Central API v2.0 Docker Compose ===
# Complete development and production environment setup
# Configuración completa de entorno de desarrollo y producción
# 完整的开发和生产环境设置

version: '3.8'

services:
  # Central API Service | Servicio API Central | 中央 API 服务
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: openred-central-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
      - "${METRICS_PORT:-9090}:9090"
    environment:
      - DATABASE_URL=postgresql://openred:openred_password@db:5432/openred_central
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./.env:/app/.env:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - openred-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database | Base de datos PostgreSQL | PostgreSQL 数据库
  db:
    image: postgres:15-alpine
    container_name: openred-postgres
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: openred_central
      POSTGRES_USER: openred
      POSTGRES_PASSWORD: openred_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - openred-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openred -d openred_central"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache | Caché Redis | Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: openred-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - openred-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus Monitoring | Monitoreo Prometheus | Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: openred-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - openred-network
    depends_on:
      - api

  # Grafana Dashboard | Panel Grafana | Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: openred-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/etc/grafana/dashboards:ro
    networks:
      - openred-network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy | Proxy Inverso Nginx | Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: openred-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - openred-network
    depends_on:
      - api
    profiles:
      - production

  # Log Aggregator | Agregador de Logs | 日志聚合器
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: openred-fluentd
    restart: unless-stopped
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/logs:ro
    networks:
      - openred-network
    profiles:
      - monitoring

# Networks | Redes | 网络
networks:
  openred-network:
    driver: bridge
    name: openred-network

# Persistent Volumes | Volúmenes Persistentes | 持久卷
volumes:
  postgres_data:
    name: openred-postgres-data
  redis_data:
    name: openred-redis-data
  prometheus_data:
    name: openred-prometheus-data
  grafana_data:
    name: openred-grafana-data
