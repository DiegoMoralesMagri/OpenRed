#!/usr/bin/env python3
"""
Tests d'Int√©gration Live - OpenRed Central API v2.0
Tests sur l'API d√©j√† en cours d'ex√©cution
"""

import requests
import time
import json
import sys

# Configuration pour l'API en cours d'ex√©cution
API_BASE_URL = "http://127.0.0.1:8000"  # Port standard utilis√©


def test_api_availability():
    """V√©rifier que l'API est disponible"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API disponible et fonctionnelle")
            return True
        else:
            print(f"‚ö†Ô∏è API r√©pond mais status incorrect: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API non disponible: {e}")
        print("üí° Assurez-vous que l'API est d√©marr√©e avec: python main_new.py")
        return False


def test_health_endpoints():
    """Test des endpoints de sant√©"""
    print("üîç Test des endpoints de sant√©...")
    
    try:
        # Health check principal
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        print(f"‚úÖ Health check: {data['status']}")
        
        # Test autres endpoints de sant√© si disponibles
        endpoints_to_test = [
            ("/health/liveness", "Liveness probe"),
            ("/health/readiness", "Readiness probe"),
            ("/docs", "Swagger documentation"),
            ("/openapi.json", "OpenAPI schema")
        ]
        
        for endpoint, name in endpoints_to_test:
            try:
                response = requests.get(f"{API_BASE_URL}{endpoint}", timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ {name}: disponible")
                else:
                    print(f"‚ö†Ô∏è {name}: status {response.status_code}")
            except:
                print(f"‚ö†Ô∏è {name}: non disponible")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test health: {e}")
        return False


def test_authentication_endpoints():
    """Test des endpoints d'authentification"""
    print("üîç Test des endpoints d'authentification...")
    
    try:
        # Test endpoint register (m√™me si on n'enregistre pas vraiment)
        test_data = {
            "username": "test_live_integration",
            "display_name": "Test Live Integration",
            "server_url": "https://test.live.example.com",
            "public_key": "test_live_public_key",
            "version": "2.0.0",
            "capabilities": ["messaging", "testing"]
        }
        
        response = requests.post(f"{API_BASE_URL}/auth/register", json=test_data, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Register endpoint: {data.get('message', 'OK')}")
        elif response.status_code in [400, 422]:
            print(f"‚úÖ Register endpoint: validation fonctionne (status {response.status_code})")
        elif response.status_code == 404:
            print("‚ö†Ô∏è Register endpoint: non impl√©ment√©")
        else:
            print(f"‚ö†Ô∏è Register endpoint: status {response.status_code}")
        
        # Test endpoint login
        login_data = {
            "username": "test_user",
            "signature": "test_signature"
        }
        
        response = requests.post(f"{API_BASE_URL}/auth/login", json=login_data, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Login endpoint: {data.get('message', 'OK')}")
        elif response.status_code in [400, 401, 422]:
            print(f"‚úÖ Login endpoint: validation fonctionne (status {response.status_code})")
        elif response.status_code == 404:
            print("‚ö†Ô∏è Login endpoint: non impl√©ment√©")
        else:
            print(f"‚ö†Ô∏è Login endpoint: status {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test auth: {e}")
        return False


def test_node_endpoints():
    """Test des endpoints de n≈ìuds"""
    print("üîç Test des endpoints de n≈ìuds...")
    
    try:
        # Test liste des n≈ìuds
        response = requests.get(f"{API_BASE_URL}/nodes", timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            nodes_count = len(data.get("nodes", []))
            print(f"‚úÖ Nodes endpoint: {nodes_count} n≈ìuds trouv√©s")
        elif response.status_code == 404:
            print("‚ö†Ô∏è Nodes endpoint: non impl√©ment√© ou aucun n≈ìud")
        else:
            print(f"‚ö†Ô∏è Nodes endpoint: status {response.status_code}")
        
        # Test recherche de n≈ìud sp√©cifique
        response = requests.get(f"{API_BASE_URL}/nodes/test_node", timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Node specific endpoint: disponible")
        elif response.status_code == 404:
            print("‚úÖ Node specific endpoint: 404 attendu (n≈ìud inexistant)")
        else:
            print(f"‚ö†Ô∏è Node specific endpoint: status {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test nodes: {e}")
        return False


def test_error_handling():
    """Test de gestion des erreurs"""
    print("üîç Test de gestion des erreurs...")
    
    try:
        # Endpoint inexistant
        response = requests.get(f"{API_BASE_URL}/nonexistent", timeout=5)
        if response.status_code == 404:
            print("‚úÖ 404 pour endpoint inexistant")
        else:
            print(f"‚ö†Ô∏è Endpoint inexistant: status {response.status_code}")
        
        # M√©thode HTTP incorrecte
        response = requests.delete(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 405:
            print("‚úÖ 405 pour m√©thode non autoris√©e")
        else:
            print(f"‚ö†Ô∏è M√©thode incorrecte: status {response.status_code}")
        
        # JSON malform√©
        try:
            response = requests.post(
                f"{API_BASE_URL}/auth/register",
                data="invalid json",
                headers={"Content-Type": "application/json"},
                timeout=5
            )
            if response.status_code in [400, 422]:
                print("‚úÖ Gestion des erreurs JSON")
            else:
                print(f"‚ö†Ô∏è JSON malform√©: status {response.status_code}")
        except:
            print("‚ö†Ô∏è Test JSON malform√© √©chou√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test errors: {e}")
        return False


def test_performance():
    """Test de performance basique"""
    print("üîç Test de performance...")
    
    try:
        start_time = time.time()
        
        # 10 requ√™tes health check
        for i in range(10):
            response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            assert response.status_code == 200
        
        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / 10
        
        print(f"‚úÖ Performance: 10 requ√™tes en {total_time:.2f}s (moy: {avg_time:.3f}s)")
        
        if avg_time < 0.5:
            print("üöÄ Performance excellente!")
        elif avg_time < 1.0:
            print("‚úÖ Performance bonne")
        else:
            print("‚ö†Ô∏è Performance √† am√©liorer")
        
        return avg_time < 2.0  # Acceptable si moins de 2s par requ√™te
        
    except Exception as e:
        print(f"‚ùå Erreur test performance: {e}")
        return False


def test_api_documentation():
    """Test de la documentation API"""
    print("üîç Test de la documentation API...")
    
    try:
        # Swagger UI
        response = requests.get(f"{API_BASE_URL}/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Swagger UI disponible")
        else:
            print(f"‚ö†Ô∏è Swagger UI: status {response.status_code}")
        
        # OpenAPI JSON
        response = requests.get(f"{API_BASE_URL}/openapi.json", timeout=5)
        if response.status_code == 200:
            data = response.json()
            version = data.get("info", {}).get("version", "unknown")
            title = data.get("info", {}).get("title", "unknown")
            print(f"‚úÖ OpenAPI schema: {title} v{version}")
            
            # Compter les endpoints
            paths = data.get("paths", {})
            endpoint_count = len(paths)
            print(f"üìä {endpoint_count} endpoints document√©s")
            
        else:
            print(f"‚ö†Ô∏è OpenAPI schema: status {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test documentation: {e}")
        return False


def run_live_integration_tests():
    """Lancer tous les tests d'int√©gration live"""
    print("=" * 70)
    print("üß™ TESTS D'INT√âGRATION LIVE - OpenRed Central API v2.0")
    print("=" * 70)
    print(f"üéØ Test de l'API sur: {API_BASE_URL}")
    print()
    
    # V√©rifier la disponibilit√© de l'API
    if not test_api_availability():
        print()
        print("‚ùå L'API n'est pas disponible. D√©marrez-la d'abord avec:")
        print("   python main_new.py")
        print("   ou")
        print("   uvicorn main_new:app --host 0.0.0.0 --port 8000")
        return False
    
    print()
    
    # Tests
    tests = [
        ("Health Endpoints", test_health_endpoints),
        ("Authentication Endpoints", test_authentication_endpoints),
        ("Node Endpoints", test_node_endpoints),
        ("Error Handling", test_error_handling),
        ("Performance", test_performance),
        ("API Documentation", test_api_documentation)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"üìã {test_name}...")
        try:
            result = test_func()
            results.append((test_name, result))
            print()
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {e}")
            results.append((test_name, False))
            print()
    
    # R√©sultats finaux
    print("=" * 70)
    print("üìä R√âSULTATS DES TESTS LIVE")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"   {test_name:<30} : {status}")
        if result:
            passed += 1
    
    print()
    print(f"üìà Score: {passed}/{total} tests r√©ussis ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ TOUS LES TESTS R√âUSSIS! L'API fonctionne parfaitement.")
        return True
    elif passed >= total * 0.8:
        print("‚úÖ SUCC√àS MAJORITAIRE - L'API fonctionne bien avec quelques points √† am√©liorer.")
        return True
    elif passed >= total * 0.5:
        print("‚ö†Ô∏è SUCC√àS PARTIEL - L'API fonctionne mais n√©cessite des am√©liorations.")
        return True
    else:
        print("‚ùå √âCHEC - L'API pr√©sente des probl√®mes importants.")
        return False


if __name__ == "__main__":
    success = run_live_integration_tests()
    sys.exit(0 if success else 1)
